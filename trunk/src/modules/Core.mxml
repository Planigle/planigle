<?xml version="1.0" encoding="utf-8"?>
<mx:Module horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" height="100%" xmlns:mx="http://www.adobe.com/2006/mxml" paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0"
	layout="absolute"
	xmlns:view="org.planigle.planigle.view.*" initialize="onInitialize(event)" creationComplete="onCreate(event)">
	
	<mx:Script>
		<![CDATA[
			import org.planigle.planigle.events.RefreshEvent;
			import mx.collections.ArrayCollection;
			import com.adobe.viewsource.ViewSource;
			import flash.display.DisplayObject;
			import flash.utils.Timer;
			import mx.binding.utils.ChangeWatcher;
			import mx.binding.utils.BindingUtils;
			import mx.managers.CursorManager;
			import mx.events.ModuleEvent;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
        	import mx.modules.ModuleManager;
        	import mx.modules.IModuleInfo;
			import org.planigle.planigle.commands.GetStoriesCommand;
			import org.planigle.planigle.model.ReleaseFactory;
			import org.planigle.planigle.model.IterationFactory;
			import org.planigle.planigle.model.StoryFactory;
			import org.planigle.planigle.model.Story;
			import org.planigle.planigle.model.CompanyFactory;
			import org.planigle.planigle.model.IndividualFactory;
			import org.planigle.planigle.model.Individual;
			import org.planigle.planigle.model.TabModelLocator;
			import org.planigle.planigle.model.ViewModelLocator;
			import org.planigle.planigle.events.CompanyChangedEvent;
			import org.planigle.planigle.events.IndividualChangedEvent;
			import org.planigle.planigle.events.ReleaseChangedEvent;
			import org.planigle.planigle.events.IterationChangedEvent;
			import org.planigle.planigle.events.StoryChangedEvent;
			import org.planigle.planigle.events.LogoutEvent;
			import org.planigle.planigle.events.URLEvent;
			import org.planigle.planigle.view.ScheduleTab;
			import org.planigle.planigle.view.StoriesTab;
			import org.planigle.planigle.view.PeopleTab;
			import org.planigle.planigle.view.ChangesTab;
			import org.planigle.planigle.view.SystemTab;

			[Bindable]
			private var factory:IndividualFactory = IndividualFactory.getInstance();

			private var schedule:ScheduleTab = new ScheduleTab();
			private var stories:StoriesTab = new StoriesTab();
			private var people:PeopleTab = new PeopleTab();
			private var changes:ChangesTab = new ChangesTab();
			private var system:SystemTab = new SystemTab();

			// Add the base tabs.
			private function onInitialize(event:Event):void
			{
				CursorManager.setBusyCursor();
				TabModelLocator.getInstance().stories = stories;
				TabModelLocator.getInstance().changes = changes;
				mainViewStack.addChild(people);
				ChangeWatcher.watch( factory, "currentIndividual", changeIndividual );
				watchIndividual(); // This is to catch it the first time (The event has already been sent).
				TabModelLocator.getInstance().selectedTab = mainViewStack.getChildAt(0) == stories ? stories : people;
				BindingUtils.bindProperty(mainViewStack, "selectedChild", TabModelLocator.getInstance(), "selectedTab");
				resetState(event);
				updateProjects(event);
				createTimer();
				CursorManager.removeBusyCursor();
			}

			private function onCreate(event:Event):void
			{
				updatePremium();
			}

			private var refreshTimer:Timer;
			
			private function createTimer():void
			{
				refreshTimer = new Timer(getRefreshInterval(),0);
				refreshTimer.addEventListener("timer",refresh);
				if (shouldAutoRefresh())
					refreshTimer.start();
			}
			
			private function getRefreshInterval():int
			{
				var interval:int = IndividualFactory.current().refreshInterval;
				if (isNaN(interval) || interval < 60000)
					interval = 60000; // Safeguard to no more than once a minute
				return interval;
			}
			
			private function shouldAutoRefresh():Boolean
			{
				return IndividualFactory.current().refreshInterval > 0; // If 0 or negative, turn off
			}

			private var watcher:ChangeWatcher;
			private var watcher2:ChangeWatcher;
			
			private function watchIndividual():void
			{
				if (watcher)
					watcher.unwatch();
				if (watcher2)
					watcher2.unwatch();
				watcher = factory.currentIndividual && factory.currentIndividual.selectedProject ? ChangeWatcher.watch( factory.currentIndividual.selectedProject, "premiumExpiry", resetState ) : null;
				watcher2 = factory.currentIndividual ? ChangeWatcher.watch( factory.currentIndividual, "allProjects", updateProjects ) : null;
			}

			// The user has changed.
			private function changeIndividual(event:Event):void
			{
				resetTimer();
				watchIndividual();
				resetState(event);
				updateProjects(event);
				updatePremium();
			}
			
			private function resetTimer():void
			{
				refreshTimer.delay = getRefreshInterval();
				refreshTimer.reset();
				if (shouldAutoRefresh())
					refreshTimer.start();
			}

			// The project has changed.
			private function changeProject(event:Event = null):void
			{
				if (watcher)
					watcher.unwatch();
				watcher = factory.currentIndividual.selectedProject ? ChangeWatcher.watch( factory.currentIndividual.selectedProject, "premiumExpiry", resetState ) : null;
				resetState(event);
				cancelCommands();
				Story.resetConditions();
				refresh(null, true);
			}
			
			private function cancelCommands():void
			{
				GetStoriesCommand.cancelCommandsInProgress();
			}

			// Hide the specified tab.
			private function hideTab(tab:DisplayObject):void
			{
				if (mainViewStack.getChildren().indexOf(tab) != -1 )
					mainViewStack.removeChild( tab );
			}
			
			// Show the specified tab.
			private function showTab(tab:DisplayObject, location:int):void
			{
				if (mainViewStack.getChildren().indexOf(tab) == -1 )
					mainViewStack.addChildAt( tab, location );
			}

			// Reset based on a new user.
			private function resetState(event:Event):void
			{
				if (factory.currentIndividual)
				{
					if (factory.currentIndividual.isAdmin())
						showTab(system, mainViewStack.getChildren().length);
					else
						hideTab(system);

					if (factory.currentIndividual.isAdminOnly())
					{
						hideTab(changes);
						hideTab(stories);
						hidePremium();
						hideTab(schedule);
					}
					else
					{
						showTab(changes, 1);
						showTab(schedule, 0);
						showTab(stories, 0);
					}
				}
			}
			
			private function updatePremium():void
			{
				if (!factory.currentIndividual.isAdminOnly())
					factory.currentIndividual.isPremium ? showPremium() : hidePremium();
			}
					
			// Refresh any cached data.
			private function refresh(event:Event = null, force:Boolean = false):void
			{
				if (force)
				{	
					CompanyFactory.getInstance().timeUpdated = null;
					ReleaseFactory.getInstance().timeUpdated = null;
					if (IndividualFactory.current().company != IndividualFactory.current().selectedProject.company)
						IndividualFactory.getInstance().timeUpdated = null;
					IterationFactory.getInstance().timeUpdated = null;
					StoryFactory.getInstance().timeUpdated = null;
				}
				if (force || !GetStoriesCommand.isLoading())
					new RefreshEvent(force).dispatch();
			}
			
			// Log out.
			private function logout():void
			{
				cancelCommands();
				refreshTimer.stop();
				Story.resetConditions();
				new LogoutEvent().dispatch();
			}

			private var premiumModule:IModuleInfo;
			private var premium:DisplayObject;
			private var isLoading:Boolean = false;

			// Show premium information.
			private function showPremium():void
			{
				if (premium)
					showTab(premium, 1);					
				else if (!isLoading)
					loadPremiumModule();
			}

			// Hide premium information.
			private function hidePremium():void
			{
				if (premium)
					hideTab(premium);
			}

			// Load the premium module.
			private function loadPremiumModule():void
			{
				isLoading = true;
				premiumModule = ModuleManager.getModule("modules/Premium.swf");
				premiumModule.addEventListener(ModuleEvent.READY, moduleEventHandler);
	            premiumModule.load(); 
			}

			private var oldIndex:int = 0;
			
			// The module has finished loading.
			private function moduleEventHandler(event:ModuleEvent):void
			{
				isLoading = false;
				premium = premiumModule.factory.create() as DisplayObject;
				showTab(premium, 1);
			}
			
			// Handle selection of a tab.
			private function selectTab(event:Event):void
			{
				if (isTabDirty(oldIndex))
				{
					Alert.show("Are you sure you want to lose your changes?", "Changes", 3, this,
						function(event:CloseEvent):void
						{
							if (event.detail==Alert.NO)
								mainViewStack.selectedIndex = oldIndex;
							else
								resetTab();
						});
				}
				else
					resetTab();
			}
			
			// Answer whether the specified child is dirty.
			private function isTabDirty(index:int):Boolean
			{
				return Object(mainViewStack.getChildAt(index)).isDirty();
			}
			
			// Reset the contents of a tab.
			private function resetTab():void
			{
				Object(mainViewStack.selectedChild).resetState(null);
				oldIndex = mainViewStack.selectedIndex;
			}
			
			// Update the selected tab in the model.
			private function updateSelectedTab():void
			{
				TabModelLocator.getInstance().selectedTab = mainViewStack.selectedChild;
			}
			
			// The user has changed the project that they are viewing.
			private function selectProject():void
			{
				IndividualFactory.current().update({"record[selected_project_id]": (selectedProject.selectedItem.id ? selectedProject.selectedItem.id : "")}, changeProject, null);
			}
			
			public function updateProjects(event:Event = null):void
			{
				var individual:Individual = IndividualFactory.getInstance().currentIndividual;
				var allProjects:ArrayCollection = individual.allProjects;
				selectedProject.dataProvider=allProjects;
				selectedProject.visible=allProjects.length>1;
				selectedProject.selectedItem=individual.selectedProject;
			}
		]]>
	</mx:Script>
	<mx:HBox horizontalGap="5" width="100%">
		<mx:TabBar id="mainNavigation" dataProvider="{mainViewStack}" itemClick="selectTab(event)" fontSize="{ViewModelLocator.getInstance().fontSize+3}" height="{ViewModelLocator.getInstance().fontSize+20}">
		</mx:TabBar>
		<mx:HBox horizontalAlign="right" width="100%">
			<mx:ComboBox id="selectedProject" fillColors="[0xffffff, 0xffffff]" fillAlphas="[1,1]" change="selectProject()" rowCount="20" />
			<mx:LinkButton label="Refresh" styleName="ToolbarLink" id="refreshButton" click="{refresh()}" fontSize="{ViewModelLocator.getInstance().fontSize+3}"/>
			<mx:LinkButton label="Log out" styleName="ToolbarLink" id="logoutButton" click="{logout()}" fontSize="{ViewModelLocator.getInstance().fontSize+3}"/>
			<mx:HBox horizontalGap="1">
				<mx:VBox verticalGap="0">
					<mx:LinkButton icon="{parentApplication.imgIncrease}" toolTip="Increase Font Size" id="increaseFontButton" click="{ViewModelLocator.getInstance().increaseFont()}" width="9"/>
					<mx:LinkButton icon="{parentApplication.imgDecrease}" toolTip="Decrease Font Size" id="decreaseFontButton" click="{ViewModelLocator.getInstance().decreaseFont()}" width="9"/>
				</mx:VBox>
				<mx:LinkButton id="planigleButton" icon="{parentApplication.imgLogoSmall}" toolTip="Planigle Project Page" click="new URLEvent('http://code.google.com/p/planigle/').dispatch()"/>
			</mx:HBox>
		</mx:HBox>
	</mx:HBox>
	<mx:ViewStack id="mainViewStack" y="{15+ViewModelLocator.getInstance().fontSize}" width="100%" height="100%" paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0" change="updateSelectedTab()" fontSize="{ViewModelLocator.getInstance().fontSize}">
	</mx:ViewStack>
</mx:Module>