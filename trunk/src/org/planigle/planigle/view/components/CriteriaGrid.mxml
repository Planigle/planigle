<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" verticalGap="0" height="100%">
	<mx:Script>
		<![CDATA[
		import flash.events.KeyboardEvent;
		import flash.events.MouseEvent;
		import mx.collections.ArrayCollection;
		import mx.controls.TextInput;
		import mx.utils.ObjectUtil;
		import mx.utils.StringUtil;
		import org.planigle.planigle.model.Story;
		import org.planigle.planigle.model.Criterium;

		private const RETURN:int=13;
		private const UP:int=38;
		private const DOWN:int=40;
		private const BACKSPACE:int=8;
		private const DELETE:int=127;
		private const INITIAL_CRITERIA:String = "<Enter criteria here; Press Enter or down arrow to add additional>";

		[Bindable]
		private var criteria:ArrayCollection = new ArrayCollection();
		
        public function clear():void
        {
        	criteria = new ArrayCollection();
        	addNewCriterium(INITIAL_CRITERIA);
        }
                
        protected function addNewCriterium(description:String=""):void
        {
        	var criterium:Criterium = new Criterium();
        	criterium.description=description;
        	criteria.addItem(criterium);
        }
	
        public function set story(story:Story):void
        {
        	var newCriteria:ArrayCollection = new ArrayCollection();
        	for each(var criterium:Criterium in story.criteria)
        		newCriteria.addItem(ObjectUtil.copy(criterium)); // Use copies so that they can be thrown away if canceled.
        	criteria = newCriteria;
        	if (newCriteria.length == 0)
        		addNewCriterium(INITIAL_CRITERIA);
        }
        
        public function filterDone():void
        {
        	var newCriteria:ArrayCollection = new ArrayCollection();
        	for each(var criterium:Criterium in criteria)
        	{
        		if (criterium.statusCode != Criterium.DONE)
	        		newCriteria.addItem(criterium);
        	}
        	criteria = newCriteria;
        	if (newCriteria.length == 0)
        		addNewCriterium(INITIAL_CRITERIA);
        }
        
        public function get acceptanceCriteria():String
        {
        	var string:String = "";
        	for each(var criterium:Criterium in criteria)
        	{
        		if (StringUtil.trim(criterium.description) != "" && criterium.description != INITIAL_CRITERIA)
        		{
	        		if (string != "")
	        			string += "\n";
	        		if (criteria.length > 1)
		        		string += "*";
	        		string += criterium.description;
	        		if (criterium.statusCode == Criterium.DONE)
	        			string += " (Done)";
	        	}
        	}
        	return string;
        }

		public function handleKeystroke(event:KeyboardEvent):void
		{
			if ((event.charCode == RETURN || event.keyCode == DOWN) && criteriaGrid.selectedIndex == criteria.length - 1)
			{
				addNewCriterium();
				criteriaGrid.editedItemPosition = {'columnIndex': 1, 'rowIndex': criteriaGrid.selectedIndex + 1};
			}
			else if (event.keyCode == UP && criteriaGrid.selectedIndex > 0)
				criteriaGrid.editedItemPosition = {'columnIndex': 1, 'rowIndex': criteriaGrid.selectedIndex - 1};
			else if (event.keyCode == DOWN && criteriaGrid.selectedIndex < criteria.length - 1)
				criteriaGrid.editedItemPosition = {'columnIndex': 1, 'rowIndex': criteriaGrid.selectedIndex + 1};
		dataGridKeyUpHandler(event);
		}

        public function iconFor(data:Object):Class
        {
        	return data.statusCode == 0 ? parentApplication.imgNotDone : parentApplication.imgDone;
        }
        
        public function toggleStatus(criterium:Object):void
        {
    		criterium.toggleStatus();
        }
        
        public function deleteItem(criterium:Object):void
        {
    		criteria.removeItemAt(criteria.getItemIndex(criterium));
        	if (criteria.length == 0)
        		addNewCriterium(INITIAL_CRITERIA);
        }
        
        public function selectFirstItem():void
        {
        	criteriaGrid.selectedIndex = criteria.length - 1;
			criteriaGrid.editedItemPosition = {'columnIndex': 1, 'rowIndex': criteriaGrid.selectedIndex};
        }

		// see http://manishjethani.com/blog/2008/04/04/the-excel-flex-copy-n-paste-sample
		private function dataGridKeyDownHandler(event:KeyboardEvent):void
		{
			var editor:TextInput = TextInput(criteriaGrid.itemEditorInstance);
			if (event.ctrlKey && !criteriaGrid.getChildByName("clipboardProxy") && (criteriaGrid.selectedItems.length > 1 ||
			(editor != null && editor.selectionBeginIndex == 0 && editor.selectionEndIndex == editor.text.length)))
			{
				// Add an invisible TextField object to the DataGrid
				var textField:TextField = new TextField();
				textField.name = "clipboardProxy";
				criteriaGrid.addChild(textField);
				textField.visible = false;
	
				textField.type = TextFieldType.INPUT;
				textField.multiline = true;
	
				// Populate the TextField with selected data in TSV format
				textField.text = getTextFromItems(criteriaGrid.selectedItems);
				textField.setSelection(0, textField.text.length - 1);
	
				// Listen for textInput event
				textField.addEventListener(TextEvent.TEXT_INPUT, clipboardProxyPasteHandler);
				
				// Prevent inappropriate messages from bubbling up (see http://old.nabble.com/Flash-Flex-Event-collision-on-TextField-input-td12412888.html)
				textField.addEventListener(Event.CHANGE, stopPropagation);
	
				// Set player-level focus to the TextField
				systemManager.stage.focus = textField;
			}
		}
		
		private function stopPropagation(event: Event):void
		{
			event.stopImmediatePropagation();
		}
	
		private function dataGridKeyUpHandler(event:KeyboardEvent):void
		{
			if (!event.ctrlKey)
			{
				var textField:TextField = TextField(criteriaGrid.getChildByName("clipboardProxy"));
				if (textField)
					criteriaGrid.removeChild(textField);
			}
		}
	
		private function clipboardProxyPasteHandler(event:TextEvent):void
		{
			var rows:Array = event.text.split("\n");
			if (!rows[rows.length - 1])
				rows.pop();
	
			var rowNum:int = criteriaGrid.selectedIndex;
			for each (var rw:String in rows)
			{
				if (rowNum <= criteria.length - 1)
					criteria.getItemAt(rowNum).description = rw;
				else
					addNewCriterium(rw);
				rowNum++;
			}
		}
	
		private function getTextFromItems(items:Array):String
		{
			var textFromItems:String = "";
			for each (var it:Object in items)
				textFromItems = it.description + "\n" + textFromItems;
			return textFromItems;
		}
		]]>
	</mx:Script>
	<mx:TextArea height="0" id="criteriaDescription" text="{criteriaGrid.selectedItem == null ? '' : criteriaGrid.selectedItem.description}" change="criteriaGrid.selectedItem.description = criteriaDescription.text"/>
	<mx:DataGrid id="criteriaGrid" variableRowHeight="true" dataProvider="{criteria}" dragEnabled="true" dropEnabled="true" dragMoveEnabled="true" allowMultipleSelection="true" showHeaders="false" editable="true" verticalGridLines="false" keyDown="dataGridKeyDownHandler(event)" keyUp="handleKeystroke(event)" width="100%" height="100%">
		<mx:columns>
			<mx:DataGridColumn resizable="false" editable="false" width="16" textAlign="center"> 
				<mx:itemRenderer>
					<mx:Component>
						<mx:Box direction="horizontal" horizontalGap="0" width="100%">
							<mx:LinkButton paddingLeft="0" paddingRight="0" id="criteriaBtnToggle" icon="{outerDocument.iconFor(data)}" toolTip="Toggle Status" click="outerDocument.toggleStatus(data);"/>
						</mx:Box>
					</mx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn resizable="false" width="448" dataField="description" wordWrap="true" editable="true"/>
			<mx:DataGridColumn resizable="false" editable="false" width="16" textAlign="center"> 
				<mx:itemRenderer>
					<mx:Component>
						<mx:Box direction="horizontal" horizontalGap="0" width="100%">
							<mx:LinkButton paddingLeft="0" paddingRight="0" id="criteriaBtnDelete" icon="{parentApplication.imgCross}" toolTip="Delete" click="outerDocument.deleteItem(data);"/>
						</mx:Box>
					</mx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
</mx:VBox>