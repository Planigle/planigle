<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" height="100%" y="0" width="100%" x="0" label="Individuals" creationComplete="created(event)">
	<mx:Script>
		<![CDATA[
		import mx.rpc.events.ResultEvent;
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.binding.utils.ChangeWatcher;
		import org.planigle.planigle.model.ViewModelLocator;
		import org.planigle.planigle.model.ProjectFactory;
		import org.planigle.planigle.model.Project;
		import org.planigle.planigle.model.IndividualFactory;
		import org.planigle.planigle.model.Individual;
		import org.planigle.planigle.view.ChangesTab;
		import org.planigle.planigle.view.ViewHelper;
		import org.planigle.planigle.events.AuditChangedEvent;
		import org.planigle.planigle.events.IndividualChangedEvent;

		[Bindable]
		public var group:Object;
		
		[Bindable]
		private var _error:String;

		[Bindable]
		private var viewModelLocator:ViewModelLocator = ViewModelLocator.getInstance();

		[Bindable]
		public var individuals:ArrayCollection = new ArrayCollection();

		[Bindable]
		public var factory:IndividualFactory = IndividualFactory.getInstance();

		// Set up event listeners.  Called when the canvas has been created.
		private function created(event:Event):void
		{
			ChangeWatcher.watch( factory, "currentIndividual", resetState );
			ChangeWatcher.watch( IndividualFactory.getInstance(), "individuals", setIndividuals );			
			ChangeWatcher.watch( this, "group", setIndividuals );			
			resetState(event); // This is to catch it the first time (The event has already been sent).
			setIndividuals(event);
		}
		
		// Update the error message.
		private function setErrorMessage(string:String):void {individualError.setStyle("color","Red"); _error = string}
		private function setSuccessMessage(string:String):void {individualError.setStyle("color","Green"); _error = string}
		private function clearErrorMessage():void {_error = ""}

		// Set the individuals to a copy (so that changes here won't affect elsewhere).
		private function setIndividuals(event:Event):void
		{
			var newIndividuals:ArrayCollection = new ArrayCollection();
			for each (var individual:Individual in IndividualFactory.getInstance().individuals)
			{
				if (!group || group.containsIndividual(individual))
					newIndividuals.addItem(individual);
			}
			individuals = newIndividuals;

			columnProject.visible = IndividualFactory.current().isAdmin() && !group;

			var teamsExist:Boolean = false;
			for each (var project:Project in ProjectFactory.getInstance().projects)
			{
				if (project.teams.length > 0)
					teamsExist = true;
			}
			columnTeam.visible = teamsExist && (!group || (group.isProject() && group.teams.length > 0));
		}
		
		// Reset my state to how it was initially.
		public function resetState(event:Event):void
		{
			currentItem = null;
			clearErrorMessage();
			currentState = '';
			if (IndividualFactory.current())
			{
				var show:Boolean = IndividualFactory.current().isAdmin();
				individualFormProject.visible = show;
				individualFormProject.maxHeight = show ? 25 : 0;

				var collect:ArrayCollection = new ArrayCollection();
				if (show)
					collect.addItem({label:"Admin", value:0});
				collect.addItem({label:"Project Admin", value:1});
				collect.addItem({label:"Project User", value:2});
				collect.addItem({label:"Read Only User", value:3});
				individualFieldRole.dataProvider = collect;
			}
		}

		// Show user a form to create a resource.
		private function showCreate(event:Event):void
		{
			clearErrorMessage();
			currentState = 'Change';
			factory.currentIndividual.isAdmin() ? individualFieldProject.setFocus() : (individualFormTeam.visible ? individualFieldTeam.setFocus() : individualFieldLogin.setFocus());

			var it:String = factory.currentIndividual.projectId;
			if (group)
				individualFieldProject.selectedItem = group.isProject() ? group : group.project;
			else if (it)
				individualFieldProject.selectedItem = ProjectFactory.getInstance().find(it);
			else
				individualFieldProject.selectedIndex = ProjectFactory.getInstance().projectSelector.length - 1;

			updateTeam(event);
			var it2:String = factory.currentIndividual.teamId;
			if (group && !group.isProject())
				individualFieldTeam.selectedItem = group;
			else if (it2)
				individualFieldTeam.selectedItem = individualFieldProject.selectedItem.find(it2);
			else
				individualFieldTeam.selectedIndex = individualFieldProject.selectedItem.teamSelector.length - 1;

			individualFieldLogin.text = '';
			individualFieldPassword.text = '';
			individualFieldPasswordConfirmation.text = '';
			individualFieldEmail.text = '';
			individualFieldPhoneNumber.text = '';
			individualFieldNotificationType.selectedIndex = 0;
			individualFieldFirstName.text = '';
			individualFieldLastName.text = '';
			individualFieldRole.selectedIndex = 1;
			individualFieldEnabled.selectedIndex = 0;
			labelPassword.required = true;
			labelPasswordConfirmation.required = true;
			individualBtnChange.label = 'Create';
		}
		
		[Bindable]
		private var currentItem:Object;

		// Show user a form to update a resource.
		public function showUpdate(event:Event) : void
		{
			currentItem = individualResourceGrid.selectedItem;
			if (currentItem && showEdit( currentItem ))
			{
				clearErrorMessage();
				currentState = 'Change';

				var it:String = currentItem.projectId;
				if (it)
					individualFieldProject.selectedItem = ProjectFactory.getInstance().find(it);
				else
					individualFieldProject.selectedIndex = ProjectFactory.getInstance().projectSelector.length - 1;

				updateTeam(event);
				var it2:String = currentItem.teamId;
				if (it2)
					individualFieldTeam.selectedItem = individualFieldProject.selectedItem.find(it2);
				else
					individualFieldTeam.selectedIndex = individualFieldProject.selectedItem.teamSelector.length - 1;
	
				if (IndividualFactory.current().isAdmin())
					individualFieldProject.setFocus();
				else
					individualFieldTeam.setFocus();
	
				individualFieldLogin.text = currentItem.login;
	
				individualFieldPassword.text = '';
				individualFieldPasswordConfirmation.text = '';
				individualFieldEmail.text = currentItem.email;
				individualFieldPhoneNumber.text = currentItem.phoneNumber;
				individualFieldNotificationType.selectedIndex = currentItem.notificationType;
				individualFieldFirstName.text = currentItem.firstName;
				individualFieldLastName.text = currentItem.lastName;
				individualFieldRole.selectedIndex = factory.currentIndividual.isAdmin() ? currentItem.role : currentItem.role - 1;
				individualFieldEnabled.selectedIndex = currentItem.enabled ? 0 : 1;
				labelPassword.required = false;
				labelPasswordConfirmation.required = false;
				individualBtnChange.label = 'Update';
			}
		}

		// Update the team.
		private function updateTeam(event:Event):void
		{
			individualFieldTeam.dataProvider = individualFieldProject.selectedItem.teamSelector;
		}

		// Confirm that user wants to delete the resource.
		public function showDelete(event:Event) : void
		{
			Alert.show("Are you sure you want to delete this?", "Delete", 3, this,
			function(event:CloseEvent):void
			{
				if (event.detail==Alert.YES)
				{
					clearErrorMessage();
					deleteResource(individualResourceGrid.selectedItem);
				}
			});
		}
		
		// Create parameters for the user's request to the server.
		private function getParams() : Object
		{
			var params:Object = new Object();
			params['record[project_id]'] = individualFieldProject.selectedItem.id ? individualFieldProject.selectedItem.id : "";
			params['record[team_id]'] = individualFieldTeam.selectedItem.id ? individualFieldTeam.selectedItem.id : "";
			params['record[login]'] = individualFieldLogin.text;
			params['record[password]'] = individualFieldPassword.text;
			params['record[password_confirmation]'] = individualFieldPasswordConfirmation.text;
			params['record[email]'] = individualFieldEmail.text;
			params['record[phone_number]'] = individualFieldPhoneNumber.text;
			params['record[notification_type]'] = individualFieldNotificationType.selectedItem.value;
			params['record[first_name]'] = individualFieldFirstName.text;
			params['record[last_name]'] = individualFieldLastName.text;
			params['record[role]'] = individualFieldRole.selectedItem.value;
			params['record[enabled]'] = individualFieldEnabled.selectedItem.value;
			params['random'] = Math.random(); // Prevents caching
			return params;
		}

		// Tell the server to change a resource.
		private function changeResource(event:Event) : void
		{
			if ( individualBtnChange.label == 'Create' )
				createResource(event);
			else
				updateResource(event);
		}
		
		// Tell the server to create a resource.
		private function createResource(event:Event) : void 
		{
			factory.createIndividual(getParams(), handleCreateSuccess, handleFailure);
		}
		
		// Tell the server to update a resource.
		private function updateResource(event:Event) : void
		{
			currentItem.update(getParams(), handleSuccess, handleFailure);
		}

		// Tell the server to delete a resource.
		private function deleteResource(item:Object):void
		{
			item.destroy(handleSuccess,handleFailure);
		}
		
		// Handle a successful create.
		private function handleCreateSuccess(item:Object):void
		{
			showCreate(null);
			setSuccessMessage("Individual was successfully created.");
		}

		// Handle a successful change.
		private function handleSuccess():void
		{
			resetState(null);
		}

		// Handle errors when making changes.
		private function handleFailure(error:XMLList):void
		{
			setErrorMessage(error);
		}

		// Answer whether to show the edit button
		public function showEdit( data:Object ):Boolean
		{
			return factory.currentIndividual.isAtLeastProjectAdmin() || (factory.currentIndividual.isAtLeastProjectUser() && data == factory.currentIndividual);
		}
		
		// Show the history for the current object.
		public function showHistory(event:Event) : void
		{
			new AuditChangedEvent(null, 'Individual', null, null, String(currentItem.id)).dispatch();
			viewModelLocator.selectedTab = viewModelLocator.changes;
		}
		]]>
	</mx:Script>
 	
	<mx:states>
		<mx:State name="Change">
			<mx:RemoveChild target="{individualBtnCreate}"/>
			<mx:AddChild relativeTo="{individualResourceGrid}" position="before">
				<mx:target>
					<mx:VBox>
						<mx:HBox>
							<mx:VBox>
								<mx:Form id="changeForm" defaultButton="{individualBtnChange}" paddingTop="0" paddingBottom="0" verticalGap="5">
									<mx:FormItem id='individualFormProject' label='Project'>
										<mx:ComboBox id='individualFieldProject' width="200" editable="false" dataProvider="{ProjectFactory.getInstance().projectSelector}" labelField="name" change="updateTeam(event)"></mx:ComboBox>
									</mx:FormItem>
									<mx:FormItem id='individualFormTeam' label='Team' visible="{individualFieldProject.selectedItem.teams.length > 0}" height="{individualFieldProject.selectedItem.teams.length > 0 ? 22 : 0}">
										<mx:ComboBox id='individualFieldTeam' width="200" editable="false" labelField="name"></mx:ComboBox>
									</mx:FormItem>
									<mx:FormItem label='Login' required="true">
										<mx:TextInput id='individualFieldLogin' maxChars="40" text='' width="300"/>
									</mx:FormItem>
									<mx:FormItem label='Password' id="labelPassword">
										<mx:TextInput id='individualFieldPassword' maxChars="40" text='' width="300" displayAsPassword="true"/>
									</mx:FormItem>
									<mx:FormItem label='Password Confirmation' id="labelPasswordConfirmation">
										<mx:TextInput id='individualFieldPasswordConfirmation' maxChars="40" text='' width="300" displayAsPassword="true"/>
									</mx:FormItem>
									<mx:FormItem id='individualFormRole' label='Role' visible="{currentItem != factory.currentIndividual}" height="{currentItem != factory.currentIndividual ? 25 : 0}">
										<mx:ComboBox id='individualFieldRole' width="150" editable="false"/>
									</mx:FormItem>
									<mx:FormItem id='individualFormEnabled' label='Enabled' visible="{currentItem != factory.currentIndividual}" height="{currentItem != factory.currentIndividual ? 25 : 0}">
										<mx:ComboBox id='individualFieldEnabled' width="100" editable="false">
											<mx:Object label="true" value='true' />
											<mx:Object label="false" value='false' />
										</mx:ComboBox>
									</mx:FormItem>
								</mx:Form>
							</mx:VBox>
							<mx:VBox>
								<mx:Form id="changeForm2" defaultButton="{individualBtnChange}" paddingTop="0" paddingBottom="0" verticalGap="5">
									<mx:FormItem label='First Name' required="true">
										<mx:TextInput id='individualFieldFirstName' maxChars="40" text='' width="300"/>
									</mx:FormItem>
									<mx:FormItem label='Last Name' required="true">
										<mx:TextInput id='individualFieldLastName' maxChars="40" text='' width="300"/>
									</mx:FormItem>
									<mx:FormItem label='Email' required="true">
										<mx:TextInput id='individualFieldEmail' maxChars="100" text='' width="300"/>
									</mx:FormItem>
									<mx:FormItem label='Phone Number' required="false">
										<mx:TextInput id='individualFieldPhoneNumber' maxChars="20" text='' width="300"/>
									</mx:FormItem>
									<mx:FormItem id='individualFormNotificationType' label='Notify Via' visible="{factory.currentIndividual.isPremium()}" height="{factory.currentIndividual.isPremium() ? 25 : 0}">
										<mx:ComboBox id='individualFieldNotificationType' width="200" editable="false">
											<mx:Object label="Neither Email nor SMS" value="0" />
											<mx:Object label="Email" value="1" />
											<mx:Object label="SMS" value="2" />
											<mx:Object label="Email and SMS" value="3" />
										</mx:ComboBox>
									</mx:FormItem>
								</mx:Form>
							</mx:VBox>
						</mx:HBox>
						<mx:ControlBar width="100%">
							<mx:Spacer width="50"/>
							<mx:Button label="Change" id="individualBtnChange" click="changeResource(event)"/>
							<mx:LinkButton label="Cancel" id="individualBtnCancel" click="resetState(event)"/>
							<mx:LinkButton id="individualBtnInfo" icon="{parentApplication.imgInfo}" toolTip="History" click="showHistory(event);"/>
						</mx:ControlBar>
					</mx:VBox>
				</mx:target>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition id="changeItem" fromState="*" toState="Change">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="returnList" fromState="Change" toState="*">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

	</mx:transitions>
	
	<mx:Panel id="combinedPanel" height="100%" y="0" width="100%" x="0" borderThicknessTop="0" borderThicknessLeft="0" borderThicknessRight="0" headerHeight="0">
		<mx:HBox width="100%" horizontalAlign="right" horizontalGap="8" verticalAlign="middle" id="hbox1" paddingTop="5" paddingLeft="5" paddingRight="5">
			<mx:Label text="Individuals" fontWeight="bold" textDecoration="underline"/>
			<mx:Text id="individualError" styleName="error" htmlText="{_error}" width="100%"/>
			<mx:Button icon="{parentApplication.imgAdd}" toolTip="Create" id="individualBtnCreate" styleName="individualBtnCreate" click="showCreate(event);" visible="{factory.currentIndividual.isAtLeastProjectAdmin()}"/>
		</mx:HBox>
		<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" id="individualResourceGrid" dataProvider="{individuals}" rowCount="{individuals.length}" width="100%" height="100%" doubleClickEnabled="{factory.currentIndividual.isAtLeastProjectUser()}" doubleClick="showUpdate(event)">
				<mx:columns>
				<mx:DataGridColumn width="70" headerText="Project" labelFunction="ViewHelper.formatProject" sortCompareFunction="ViewHelper.sortProject" id="columnProject"/>
				<mx:DataGridColumn width="70" headerText="Team" labelFunction="ViewHelper.formatTeam" sortCompareFunction="ViewHelper.sortTeam" id="columnTeam"/>
				<mx:DataGridColumn width="70" headerText="Login" dataField="login"/>
				<mx:DataGridColumn headerText="First Name" width="70" dataField="firstName"/>
				<mx:DataGridColumn headerText="Last Name" width="70" dataField="lastName"/>
				<mx:DataGridColumn headerText="Role" width="75" dataField="role" labelFunction="ViewHelper.formatRole"/>
				<mx:DataGridColumn width="55" headerText="Activated" dataField="activated"/>
				<mx:DataGridColumn width="50" headerText="Enabled" dataField="enabled"/>
				<mx:DataGridColumn width="155" headerText="Last Logged In" dataField="lastLoginTime" sortCompareFunction="ViewHelper.sortLastLogin"/>
				<mx:DataGridColumn editable="false" width="105" minWidth="105" sortable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Box direction="horizontal" horizontalGap="0">
								<mx:LinkButton id="individualBtnEdit" icon="{parentApplication.imgEdit}" toolTip="Edit" click="outerDocument.showUpdate(event);" visible="{outerDocument.showEdit(data)}"/>
								<mx:LinkButton id="individualBtnDelete" icon="{parentApplication.imgCross}" toolTip="Delete" click="outerDocument.showDelete(event);" visible="{outerDocument.factory.currentIndividual.isAtLeastProjectAdmin()}"/>
							</mx:Box>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:Panel>
</mx:Canvas>