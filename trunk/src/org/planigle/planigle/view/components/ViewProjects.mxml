<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="org.planigle.planigle.view.controls.*" xmlns:component="org.planigle.planigle.view.components.*" height="100%" y="0" width="100%" x="0" label="Projects" creationComplete="created(event)">
	<mx:Metadata>
		[Event(name="itemClick", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
		import flash.external.ExternalInterface;
		import mx.rpc.events.ResultEvent;
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.events.ListEvent;
		import mx.events.CloseEvent;
		import mx.binding.utils.ChangeWatcher;
		import org.planigle.planigle.model.ViewModelLocator;
		import org.planigle.planigle.model.ProjectFactory;
		import org.planigle.planigle.model.Project;
		import org.planigle.planigle.model.Team;
		import org.planigle.planigle.model.IndividualFactory;
		import org.planigle.planigle.view.ViewHelper;
		import org.planigle.planigle.events.ProjectChangedEvent;
		
		[Bindable]
		private var _error:String;

		[Bindable]
		private var viewModelLocator:ViewModelLocator = ViewModelLocator.getInstance();

		[Bindable]
		public var projects:ArrayCollection = new ArrayCollection();

		[Bindable]
		public var factory:IndividualFactory = IndividualFactory.getInstance();

		// Set up event listeners.  Called when the canvas has been created.
		private function created(event:Event):void
		{
			ChangeWatcher.watch( factory, "currentIndividual", resetState );			
			ChangeWatcher.watch( ProjectFactory.getInstance(), "projects", setProjects );			
			resetState(event); // This is to catch it the first time (The event has already been sent).
			setProjects(event);
		}
				
		// Update the error message.
		private function setErrorMessage(string:String):void {projectError.setStyle("color","Red"); _error = string}
		private function setSuccessMessage(string:String):void {projectError.setStyle("color","Green"); _error = string}
		private function clearErrorMessage():void {_error = ""}

		// Set the projects to a copy (so that changes here won't affect elsewhere).
		private function setProjects(event:Event):void
		{
			var newProjects:ArrayCollection = new ArrayCollection();
			for each (var project:Project in ProjectFactory.getInstance().projects)
			{
				newProjects.addItem(project);
				if (project.isExpanded())
				{
					for each (var team:Team in project.teams)
						newProjects.addItem(team);
				}
			}
			projects = newProjects;
		}
		
		// Reset my state to how it was initially.
		public function resetState(event:Event):void
		{
			currentItem = null;
			clearErrorMessage();
			currentState = '';
		}

		// Show user a form to create a resource.
		private function showCreate(event:Event):void
		{
			clearErrorMessage();
			currentState = 'Change';
			projectFieldName.setFocus();
			projectFieldName.text = '';
			projectFieldDescription.text = '';
			projectFieldPremiumExpiry.selectedDate = new Date(new Date().time + 30*24*60*60*1000);
			projectFieldPremiumLimit.text = '1000';
			projectBtnChange.label = 'Create';
		}

		private var currentItem:Object; // Remember in case selection changes while form is open.

		// Prepare the fields to create / edit a project.
		private function prepareForProject():void
		{
			projectNameForm.label = "Project Name";
			projectFormSurveyMode.visible = true;
			projectFormSurveyMode.height = 22;
			projectFormSurveyUrl.visible = true;
			projectFormSurveyUrl.height = 22;
			if (IndividualFactory.current().isAdmin())
			{
				projectFormPremiumExpiry.visible = true;
				projectFormPremiumExpiry.height = 22;
				projectFormPremiumLimit.visible = true;
				projectFormPremiumLimit.height = 22;
			}
			else
			{
				projectFormPremiumExpiry.visible = false;
				projectFormPremiumExpiry.height = 0;
				projectFormPremiumLimit.visible = false;
				projectFormPremiumLimit.height = 0;
			}
		}

		// Show user a form to create a resource.
		private function showCreateProject(event:Event):void
		{
			currentItem = null;
			showCreate(event);
			prepareForProject();
			projectFieldSurveyMode.selectedIndex = 1;
			projectLabelSurveyUrl.text = "Will be assigned on creation";
		}

		// Prepare the fields to create / edit a team.
		private function prepareForTeam():void
		{
			projectNameForm.label = "Team Name";
			projectFormSurveyMode.visible = false;
			projectFormSurveyMode.height = 0;
			projectFormSurveyUrl.visible = false;
			projectFormSurveyUrl.height = 0;
			projectFormPremiumExpiry.visible = false;
			projectFormPremiumExpiry.height = 0;
			projectFormPremiumLimit.visible = false;
			projectFormPremiumLimit.height = 0;
		}

		// Show user a form to create a resource.
		public function showCreateTeam(event:Event):void
		{
			currentItem = projectResourceGrid.selectedItem;
			showCreate(event);
			prepareForTeam();
		}

		// Show user a form to update a resource.
		public function showUpdate(event:Event) : void
		{
			currentItem = projectResourceGrid.selectedItem;
			if (currentItem)
			{
				clearErrorMessage();
				currentState = 'Change';
				projectFieldName.text = currentItem.name;
				projectFieldName.setFocus();
				projectFieldName.setSelection(0, projectFieldName.text.length );
				projectFieldDescription.text = currentItem.description;
				if (currentItem.isProject())
				{
					prepareForProject();
					projectFieldSurveyMode.selectedIndex = currentItem.surveyMode;
					var base:String = ExternalInterface.call("BrowserHistory.getURL");
					for (var index:int = base.indexOf( "/" ); base.indexOf( "/", index + 1 ) >= 0; )
						index = base.indexOf( "/", index + 1 ); // Get the last /
					base = base.substr( 0, index );
					projectLabelSurveyUrl.text = base + "/survey.html?projectid=" + currentItem.id + "&surveykey=" + currentItem.surveyKey;
					projectFieldPremiumExpiry.selectedDate = currentItem.premiumExpiry;
					projectFieldPremiumLimit.text = currentItem.premiumLimit;
				}
				else
					prepareForTeam();
				projectBtnChange.label = 'Update';
			}
		}

		// Confirm that user wants to delete the resource.
		public function showDelete(event:Event) : void
		{
			Alert.show("Are you sure you want to delete this?", "Delete", 3, this,
			function(event:CloseEvent):void
			{
				if (event.detail==Alert.YES)
				{
					clearErrorMessage();
					deleteResource(projectResourceGrid.selectedItem);
				}
			});
		}
		
		// Create parameters for the user's request to the server.
		private function getParams(isProject:Boolean) : Object
		{
			var params:Object = new Object();
			params['record[name]'] = projectFieldName.text;
			params['record[description]'] = projectFieldDescription.text;
			if (isProject)
			{
				params['record[survey_mode]'] = projectFieldSurveyMode.selectedItem.value;
				params['record[premium_expiry]'] = projectFieldPremiumExpiry.selectedDate;
				params['record[premium_limit]'] = projectFieldPremiumLimit.text;
			}
			params['random'] = Math.random(); // Prevents caching
			return params;
		}

		// Tell the server to change a resource.
		private function changeResource(event:Event) : void
		{
			if ( projectBtnChange.label == 'Create' )
				createResource(event);
			else
				updateResource(event);
		}
		
		// Tell the server to create a resource.
		private function createResource(event:Event) : void 
		{
			if (currentItem)
				currentItem.createTeam(getParams(false), handleCreateSuccess, handleFailure);
			else
				ProjectFactory.getInstance().createProject(getParams(true), handleCreateSuccess, handleFailure);
		}
		
		// Tell the server to update a resource.
		private function updateResource(event:Event) : void
		{
			currentItem.update(getParams(currentItem.isProject()), currentItem.isProject() ? handleUpdateProjectSuccess : handleSuccess, handleFailure);
		}

		// Tell the server to delete a resource.
		private function deleteResource(item:Object):void
		{
			item.destroy(handleSuccess,handleFailure);
			projectResourceGrid.selectedItem = null;
			groupSelected(null); // Deletion can affect selection; ensure event is sent
		}
		
		// Handle a successful create.
		private function handleCreateSuccess(item:Object):void
		{
			showCreate(null);
			if (currentItem)
				setSuccessMessage("Team was successfully created.");
			else
				setSuccessMessage("Project was successfully created.");
		}

		// Handle a successful project change.
		private function handleUpdateProjectSuccess():void
		{
			setProjects(null);
			handleSuccess();
		}

		// Handle a successful change.
		private function handleSuccess():void
		{
			resetState(null);
		}

		// Handle errors when making changes.
		private function handleFailure(error:XMLList):void
		{
			setErrorMessage(error);
		}

		public var group:Object;

		// A group has been selected.  Pass it up the chain.
		private function groupSelected(event:ListEvent):void
		{
			group = projectResourceGrid.selectedItem;
			dispatchEvent(new Event("itemClick"));
		}
		
		// Expand / collapse a project.
		public function expand(event:Event) : void
		{
			if (projectResourceGrid.selectedItem.isProject())
				{
				projectResourceGrid.selectedItem.toggleExpanded();
				setProjects(event);
				}
		}
		
		// Answer an icon for my expand button.
		public function expandIcon(item:Object):Class
		{
			switch (item.expandLabel())
			{
				case '+':
					return parentApplication.imgCollapsed;
				case '-':
					return parentApplication.imgExpanded;
				default:
					return null;
			}
		}
		
		// Answer the color to use for a row.
		private function rowColor(item:Object, color:uint) : uint
		{
			return (item && item.backgroundColor() >= 0) ? item.backgroundColor() : color;
		}

		// Answer whether to show (based on whether the item is a project and the user has rights).
		public function shouldShowDeleteProject(data:Object):Boolean
		{
			return (data.isProject() && factory.currentIndividual.isAdmin()) ||
				(!data.isProject() && factory.currentIndividual.isAtLeastProjectAdmin());
		}

		// Answer whether to show (based on whether the item is a project and the user has rights).
		public function shouldShowAddTeam(data:Object):Boolean
		{
			return data.isProject() && factory.currentIndividual.isAtLeastProjectAdmin();
		}
		]]>
	</mx:Script>
 	
	<mx:states>
		<mx:State name="Change">
			<mx:RemoveChild target="{projectBtnCreate}"/>
			<mx:AddChild relativeTo="{projectResourceGrid}" position="before">
				<mx:target>
					<mx:VBox>
						<mx:HBox>
							<mx:VBox>
								<mx:Form id="projectChangeForm" defaultButton="{projectBtnChange}" paddingTop="0" paddingBottom="0" verticalGap="5">
									<mx:FormItem id="projectNameForm" label='Name' required="true">
										<mx:TextInput id='projectFieldName' maxChars="40" text='' width="350"/>
									</mx:FormItem>
									<mx:FormItem label='Description'>
										<component:HTMLTextArea id='projectFieldDescription'/>
									</mx:FormItem>
								</mx:Form>
							</mx:VBox>
							<mx:VBox>
								<mx:Form id="projectChangeForm2" defaultButton="{projectBtnChange}" paddingTop="0" paddingBottom="0" verticalGap="5">
									<mx:FormItem id="projectFormSurveyMode" label='Stories'>
										<mx:ComboBox id='projectFieldSurveyMode' width="150" editable="false">
											<mx:Object label="Private" value="0" />
											<mx:Object label="Private by Default" value="1" />
											<mx:Object label="Public by Default" value="2" />
										</mx:ComboBox>
									</mx:FormItem>
									<mx:FormItem id='projectFormPremiumExpiry' label='Premium Expiry' required="true">
										<mx:DateField id='projectFieldPremiumExpiry' editable="true" showToday="true" width="100"/>
									</mx:FormItem>
									<mx:FormItem id='projectFormPremiumLimit' label='Premium Limit (# Users)' required="true">
										<mx:TextInput id='projectFieldPremiumLimit' restrict="0-9" text='' width="100"/>
									</mx:FormItem>
								</mx:Form>
							</mx:VBox>
						</mx:HBox>
						<mx:FormItem id="projectFormSurveyUrl" label='      Survey URL' visible="{projectFieldSurveyMode.selectedIndex > 0}" height="{projectFieldSurveyMode.selectedIndex > 0 ? 20 : 0}">
							<mx:Label id="projectLabelSurveyUrl" selectable="true"/>
						</mx:FormItem>
						<mx:ControlBar width="100%">
							<mx:Spacer width="50"/>
							<mx:Button label="Change" id="projectBtnChange" click="changeResource(event)"/>
							<mx:LinkButton label="Cancel" id="projectBtnCancel" click="resetState(event)"/>
						</mx:ControlBar>
					</mx:VBox>
				</mx:target>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition id="projectChangeItem" fromState="*" toState="Change">
			<mx:Sequence targets="{[projectCombinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{projectCombinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="projectReturnList" fromState="Change" toState="*">
			<mx:Sequence targets="{[projectCombinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{projectCombinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

	</mx:transitions>
	
	<mx:Panel id="projectCombinedPanel" height="100%" y="0" width="100%" x="0"  borderThicknessTop="0" borderThicknessLeft="0" borderThicknessRight="0" headerHeight="0">
		<mx:HBox width="100%" horizontalAlign="right" horizontalGap="8" verticalAlign="middle" id="projectHbox1" paddingTop="5" paddingLeft="5" paddingRight="5">
			<mx:Label text="Projects" fontWeight="bold" textDecoration="underline"/>
			<mx:Text id="projectError" styleName="error" htmlText="{_error}" width="100%"/>
			<mx:Button icon="{parentApplication.imgAdd}" toolTip="Create" id="projectBtnCreate" click="showCreateProject(event);" visible="{factory.currentIndividual.isAdmin()}"/>
		</mx:HBox>
		<local:ColoredBackgroundDataGrid xmlns:mx="http://www.adobe.com/2006/mxml" id="projectResourceGrid" dataProvider="{projects}" rowCount="{projects.length}" width="100%" height="100%" doubleClickEnabled="{factory.currentIndividual.isAtLeastProjectAdmin()}" doubleClick="showUpdate(event)" itemClick="groupSelected(event)" rowColorFunction="rowColor">
			<local:columns>
				<mx:DataGridColumn editable="false" minWidth="16" width="16" sortable="false" textAlign="center"> 
					<mx:itemRenderer> 
						<mx:Component>
							<mx:Box direction="horizontal" horizontalGap="0">
								<mx:LinkButton width="16" id="projectBtnExpand" icon="{outerDocument.expandIcon(data)}" click="outerDocument.expand(event);"/>		 	
							</mx:Box>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Name">
					<mx:itemRenderer> 
						<mx:Component>
							<mx:Text paddingLeft="{data.indent}" text="{data.name}" selectable="false"/>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Description" dataField="description"/>
				<mx:DataGridColumn headerText="Stories" width="120" labelFunction="ViewHelper.formatSurveyMode" sortCompareFunction="ViewHelper.sortSurveyMode"/>
				<mx:DataGridColumn editable="false" width="80" minWidth="80" sortable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Box direction="horizontal" horizontalGap="0">
								<mx:LinkButton id="projectBtnEdit" icon="{parentApplication.imgEdit}" toolTip="Edit" click="outerDocument.showUpdate(event);" visible="{outerDocument.factory.currentIndividual.isAtLeastProjectAdmin()}"/>
								<mx:LinkButton id="projectBtnDelete" icon="{parentApplication.imgCross}" toolTip="Delete" click="outerDocument.showDelete(event);" visible="{outerDocument.shouldShowDeleteProject(data)}"/>
								<mx:LinkButton id="teamBtnAdd" icon="{parentApplication.imgAdd}" toolTip="Add Team" click="outerDocument.showCreateTeam(event);" visible="{outerDocument.shouldShowAddTeam(data)}"/>
							</mx:Box>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</local:columns>
		</local:ColoredBackgroundDataGrid>
	</mx:Panel>
</mx:Canvas>