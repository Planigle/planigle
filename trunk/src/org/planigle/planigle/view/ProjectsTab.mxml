<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" label="Projects" creationComplete="created(event)">
	<mx:HTTPService id="resourcePut" useProxy="false" method="POST" result="handleUpdate(event)" resultFormat="e4x" showBusyCursor="true"/>
	<mx:HTTPService id="resourceDelete" useProxy="false" method="POST" result="handleUpdate(event)" resultFormat="e4x" showBusyCursor="true"/>
	<mx:HTTPService id="resourcePost" url="projects.xml" useProxy="false" method="POST" result="handleCreate(event)" resultFormat="e4x" showBusyCursor="true"/>
	
	<mx:Script>
		<![CDATA[
		import flash.external.ExternalInterface;
		import mx.rpc.events.ResultEvent;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.binding.utils.ChangeWatcher;
		import org.planigle.planigle.model.ViewModelLocator;
		import org.planigle.planigle.model.IndividualFactory;
		import org.planigle.planigle.events.ProjectChangedEvent;
		
		[Bindable]
		private var _error:String;

		[Bindable]
		private var viewModelLocator:ViewModelLocator = ViewModelLocator.getInstance();

		[Bindable]
		public var factory:IndividualFactory = IndividualFactory.getInstance();

		// Set up event listeners.  Called when the canvas has been created.
		private function created(event:Event):void
		{
			ChangeWatcher.watch( factory, "currentIndividual", resetState );			
			resetState(event); // This is to catch it the first time (The event has already been sent).
		}
		
		// Clear the error message.
		private function clearErrorMessage():void {_error = ""}
		
		// Reset my state to how it was initially.
		public function resetState(event:Event):void
		{
			currentItem = null;
			clearErrorMessage();
			currentState = '';
		}

		// Show user a form to create a resource.
		private function showCreate(event:Event):void
		{
			clearErrorMessage();
			currentState = 'Change';
			projectFieldName.setFocus();
			projectFieldName.text = '';
			projectFieldDescription.text = '';
			projectFieldSurveyMode.selectedIndex = 0;
			projectLabelSurveyUrl.text = "Will be assigned on creation";
			projectBtnChange.label = 'Create';
		}

		private var currentItem:Object; // Remember in case selection changes while form is open.

		// Show user a form to update a resource.
		public function showUpdate(event:Event) : void
		{
			currentItem = projectResourceGrid.selectedItem;
			if (currentItem)
			{
				clearErrorMessage();
				currentState = 'Change';
				projectFieldName.text = currentItem.name;
				projectFieldName.setFocus();
				projectFieldName.setSelection(0, projectFieldName.text.length );
				projectFieldDescription.text = currentItem.description;
				projectFieldSurveyMode.selectedIndex = int(currentItem.child("survey-mode"));
				var base:String = ExternalInterface.call("BrowserHistory.getURL");
				for (var index:int = base.indexOf( "/" ); base.indexOf( "/", index + 1 ) >= 0; )
					index = base.indexOf( "/", index + 1 ); // Get the last /
				base = base.substr( 0, index );
				projectLabelSurveyUrl.text = base + "/survey.html?projectid=" + currentItem.id + "&surveykey=" + currentItem.child("survey-key");
				projectBtnChange.label = 'Update';
			}
		}

		// Confirm that user wants to delete the resource.
		public function showDelete(event:Event) : void
		{
			Alert.show("Are you sure you want to delete this?", "Delete", 3, this,
			function(event:CloseEvent):void
			{
				if (event.detail==Alert.YES)
				{
					clearErrorMessage();
					deleteResource(projectResourceGrid.selectedItem.id);
				}
			});
		}
		
		// Create parameters for the user's request to the server.
		private function getParams() : Object
		{
			var params:Object = new Object();
			params['record[name]'] = projectFieldName.text;
			params['record[description]'] = projectFieldDescription.text;
			params['record[survey_mode]'] = projectFieldSurveyMode.selectedItem.value;
			params['random'] = Math.random(); // Prevents caching
			return params;
		}

		// Tell the server to change a resource.
		private function changeResource(event:Event) : void
		{
			if ( projectBtnChange.label == 'Create' )
				createResource(event);
			else
				updateResource(event);
		}
		
		// Tell the server to create a resource.
		private function createResource(event:Event) : void 
		{
			resourcePost.send(getParams());
		}
		
		// Tell the server to update a resource.
		private function updateResource(event:Event) : void
		{
			var params:Object = getParams();
			params['_method'] = "PUT";
			resourcePut.url = "projects/" + currentItem.id + ".xml";
			resourcePut.send(params);
		}

		// Tell the server to delete a resource.
		private function deleteResource(id:String):void
		{
			resourceDelete.url = "projects/" + id + ".xml";
			resourceDelete.send({_method: "DELETE"});
		}

		// The server has responded with the results of the user's change.
		private function handleChange(event:ResultEvent, isCreate:Boolean):void
		{
			var result:XML = XML(event.result);
			if (result.error.length() > 0)
				_error = result.error;
			else
			{
				if (isCreate)
				{
					showCreate(event);
					_error = "Project was successfully created."
				}
				else
					resetState(event);
				new ProjectChangedEvent().dispatch();
			}
		}
		
		// The server has responded with the results of the user's create.
		private function handleCreate(event:ResultEvent):void
		{
			handleChange(event, true);
		}
		
		// The server has responded with the results of the user's update.
		private function handleUpdate(event:ResultEvent):void
		{
			handleChange(event, false);
		}
		]]>
	</mx:Script>
 	
	<mx:states>
		<mx:State name="Change">
			<mx:RemoveChild target="{projectBtnCreate}"/>
			<mx:AddChild relativeTo="{projectResourceGrid}" position="before">
				<mx:target>
					<mx:Form id="projectChangeForm" defaultButton="{projectBtnChange}">
						<mx:FormItem label='Name' required="true">
							<mx:TextInput id='projectFieldName' maxChars="40" text='' width="350"/>
						</mx:FormItem>
						<mx:FormItem label='Description'>
							<mx:TextArea id='projectFieldDescription' maxChars="4096" height="64" width="500"><mx:text/></mx:TextArea>
						</mx:FormItem>
						<mx:FormItem label='Stories'>
							<mx:ComboBox id='projectFieldSurveyMode' width="350" editable="false">
								<mx:Object label="Private" value="0" />
								<mx:Object label="Private by Default" value="1" />
								<mx:Object label="Public by Default" value="2" />
							</mx:ComboBox>
						</mx:FormItem>
						<mx:FormItem id="projectFormSurveyUrl" label='Survey URL' visible="{projectFieldSurveyMode.selectedIndex > 0}" height="{projectFieldSurveyMode.selectedIndex > 0 ? 20 : 0}">
							<mx:Label id="projectLabelSurveyUrl" selectable="true"/>
						</mx:FormItem>
						<mx:ControlBar width="100%">
							<mx:Spacer width="50"/>
							<mx:Button label="Change" id="projectBtnChange" click="changeResource(event)"/>
							<mx:LinkButton label="Cancel" id="projectBtnCancel" click="resetState(event)"/>
						</mx:ControlBar>
					</mx:Form>	
				</mx:target>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition id="projectChangeItem" fromState="*" toState="Change">
			<mx:Sequence targets="{[projectCombinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{projectCombinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="projectReturnList" fromState="Change" toState="*">
			<mx:Sequence targets="{[projectCombinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{projectCombinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

	</mx:transitions>
	
	<mx:Panel id="projectCombinedPanel" height="100%" y="0" width="100%" x="0" paddingTop="5" paddingLeft="5" paddingRight="5">
		<mx:HBox width="100%" horizontalAlign="right" horizontalGap="8" verticalAlign="middle" id="projectHbox1">
			<mx:Text id="projectError" styleName="error" htmlText="{_error}" color="#ff0033" width="100%"/>
			<mx:Button label="Create" id="projectBtnCreate" click="showCreate(event);" visible="{factory.currentIndividual.isAdmin()}"/>
		</mx:HBox>
		<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" id="projectResourceGrid" dataProvider="{viewModelLocator.projects}" rowCount="{viewModelLocator.projectCount}" width="100%" height="100%" doubleClickEnabled="{factory.currentIndividual.isAtLeastProjectAdmin()}" doubleClick="showUpdate(event)">
				<mx:columns>
				<mx:DataGridColumn headerText="Name" dataField="name"/>
				<mx:DataGridColumn headerText="Description" dataField="description"/>
				<mx:DataGridColumn headerText="Stories" labelFunction="ViewHelper.formatSurveyMode" sortCompareFunction="ViewHelper.sortSurveyMode"/>
				<mx:DataGridColumn editable="false" width="60" minWidth="60" sortable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Box direction="horizontal" horizontalGap="0">
								<mx:LinkButton id="projectBtnEdit" icon="{parentApplication.imgEdit}" toolTip="Edit" click="outerDocument.showUpdate(event);" visible="{outerDocument.factory.currentIndividual.isAtLeastProjectAdmin()}"/>
								<mx:LinkButton id="projectBtnDelete" icon="{parentApplication.imgCross}" toolTip="Delete" click="outerDocument.showDelete(event);" visible="{outerDocument.factory.currentIndividual.isAdmin()}"/>
							</mx:Box>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:Panel>
</mx:Canvas>