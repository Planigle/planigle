<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" label="Stories" creationComplete="created(event)">
	<mx:HTTPService id="resourcePut" useProxy="false" method="POST" result="handleUpdate(event)" resultFormat="e4x"/>
	<mx:HTTPService id="resourceDelete" useProxy="false" method="POST" result="handleUpdate(event)" resultFormat="e4x"/>
	<mx:HTTPService id="resourcePost" url="/stories.xml" useProxy="false" method="POST" result="handleUpdate(event)" resultFormat="e4x"/>
	<mx:HTTPService id="resourceSort" url="/stories/sort.xml" useProxy="false" method="POST" result="handleUpdate(event)" resultFormat="e4x"/>
	
	<mx:Script>
		<![CDATA[
			import mx.events.DragEvent;
		import mx.rpc.events.ResultEvent;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.binding.utils.ChangeWatcher;
		import org.planigle.planigle.model.ViewModelLocator;
		import org.planigle.planigle.events.StoryChangedEvent;
		
		[Bindable]
		private var _error:String;

		[Bindable]
		private var viewModelLocator:ViewModelLocator = ViewModelLocator.getInstance();

		// Set up event listeners.  Called when the canvas has been created.
		private function created(event:Event):void
		{
			ChangeWatcher.watch( viewModelLocator, "workflowState", resetState );			
		}
		
		// Clear the error message.
		private function clearErrorMessage():void {_error = ""}
		
		// Reset my state to how it was initially.
		private function resetState(event:Event):void
		{
			clearErrorMessage();
			currentState = '';
		}

		// Show user a form to create a resource.
		private function createHandler(event:Event):void
		{
			clearErrorMessage();
			currentState = 'Change';
			field_name.setFocus();
			field_name.text = '';
			field_description.text = '';
			field_acceptance_criteria.text = '';
			field_iteration.selectedIndex = 0;
			field_owner.selectedIndex = 0;
			field_effort.text = '';
			field_status.selectedIndex = 0;
			btn_change.label = 'Create';
		}

		// Show user a form to update a resource.
		public function updateHandler(event:Event) : void
		{
			clearErrorMessage();
			currentState = 'Change';
			field_name.setFocus();
			field_name.text = resource_grid.selectedItem.name;
			field_description.text = resource_grid.selectedItem.description;
			field_acceptance_criteria.text = resource_grid.selectedItem.child("acceptance-criteria");

			var it:int = int(resource_grid.selectedItem.child("iteration-id"));
			if (it == 0)
				field_iteration.selectedIndex = 0;
			else
				field_iteration.selectedItem = viewModelLocator.iterationSelector.(id == it);

			it = int(resource_grid.selectedItem.child("individual-id"));
			if (it == 0)
				field_owner.selectedIndex = 0;
			else
				field_owner.selectedItem = viewModelLocator.individualSelector.(id == it);

			field_effort.text = resource_grid.selectedItem.effort;
			field_status.selectedIndex = resource_grid.selectedItem.child("status-code");
			btn_change.label = 'Update';
		}

		// Confirm that user wants to delete the resource.
		public function deleteHandler(event:Event) : void
		{
			Alert.show("Are you sure you want to delete this?", "Delete", 3, this,
			function(event:CloseEvent):void
			{
				if (event.detail==Alert.YES)
				{
					clearErrorMessage();
					deleteResource(resource_grid.selectedItem.id);
				}
			});
		}
		
		// Create parameters for the user's request to the server.
		private function getParams() : Object
		{
			var params:Object = new Object();
			params['record[name]'] = field_name.text;
			params['record[description]'] = field_description.text;
			params['record[acceptance_criteria]'] = field_acceptance_criteria.text;
			params['record[iteration_id]'] = field_iteration.selectedItem.id;
			params['record[individual_id]'] = field_owner.selectedItem.id;
			params['record[effort]'] = field_effort.text;
			params['record[status_code]'] = field_status.selectedItem.value;
			params['random'] = Math.random(); // Prevents caching
			return params;
		}

		// Tell the server to change a resource.
		private function changeResource(event:Event) : void
		{
			if ( btn_change.label == 'Create' )
				createResource(event);
			else
				updateResource(event);
		}
		
		// Tell the server to create a resource.
		private function createResource(event:Event) : void 
		{
			resourcePost.send(getParams());
		}
		
		// Tell the server to update a resource.
		private function updateResource(event:Event) : void
		{
			var params:Object = getParams();
			params['_method'] = "PUT";
			resourcePut.url = "/stories/" + resource_grid.selectedItem.id + ".xml";
			resourcePut.send(params);
		}

		// Tell the server to delete a resource.
		private function deleteResource(id:String):void
		{
			resourceDelete.url = "/stories/" + id + ".xml";
			resourceDelete.send({_method: "DELETE"});
		}

		// The server has responded with the results of the user's change.
		private function handleUpdate(event:ResultEvent):void
		{
			var result:XML = XML(event.result);
			if (result.error.length() > 0)
				_error = result;
			else
			{
				resetState(event);
				new StoryChangedEvent().dispatch();
			}
		}
		
		// The user has reordered the stories.
		private function handleDrop(event:DragEvent):void
		{
			var stories:XMLList = viewModelLocator.stories;
			var movedItems:Array = event.dragSource.dataForFormat("items") as Array;
			var story:XMLList = XMLList(movedItems[0]);
			var newIndex:int = resource_grid.calculateDropIndex(event);			
			var inc:int = 0;
			var url:String = "/stories/sort.xml?";
			for(var i:int = 0; i < stories.length(); i++)
			{
				if (i>0) url += "&";
				if (i == newIndex)
				{
					if (stories[i] != story) inc = -1;
					url += "stories[]=" + story.id;
				}
				else
				{
					if (stories[i+inc] == story) inc = 0;
					url += "stories[]=" + stories[i+inc].id;
				}
			}
			resourceSort.url = url;
			resourceSort.send();
		}
		]]>
	</mx:Script>
 	
	<mx:states>
		<mx:State name="Change">
			<mx:RemoveChild target="{btn_create}"/>
			<mx:AddChild relativeTo="{resource_grid}" position="before">
				<mx:target>
					<mx:Form id="change_form">
						<mx:FormItem label='Name'>
							<mx:TextInput id='field_name' text='' width="350"/>
						</mx:FormItem>
						<mx:FormItem label='Description'>
							<mx:TextArea id='field_description' height="64" width="500"><mx:text/></mx:TextArea>
						</mx:FormItem>
						<mx:FormItem label='Acceptance Criteria'>
							<mx:TextArea id='field_acceptance_criteria' height="64" width="500"><mx:text/></mx:TextArea>
						</mx:FormItem>
						<mx:FormItem label="Iteration">
							<mx:ComboBox id='field_iteration' width="350" editable="false" dataProvider="{viewModelLocator.iterationSelector}" labelField="name"></mx:ComboBox>
						</mx:FormItem>
						<mx:FormItem label='Owner'>
							<mx:ComboBox id='field_owner' width="350" editable="false" dataProvider="{viewModelLocator.individualSelector}" labelField="full-name"></mx:ComboBox>
						</mx:FormItem>
						<mx:FormItem label='Effort'>
							<mx:TextInput id='field_effort' text='' width="350"/>
						</mx:FormItem>
						<mx:FormItem label='Status'>
							<mx:ComboBox id='field_status' width="350" editable="false">
								<mx:Object label="Created" value="0" />
								<mx:Object label="In Progress" value="1" />
								<mx:Object label="Accepted" value="2" />
							</mx:ComboBox>
						</mx:FormItem>
						<mx:ControlBar width="100%">
							<mx:Spacer width="50"/>
							<mx:Button label="Change" id="btn_change" click="changeResource(event)"/>
							<mx:LinkButton label="Cancel" id="btn_cancel" click="resetState(event)"/>
						</mx:ControlBar>
					</mx:Form>	
				</mx:target>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition id="changeItem" fromState="*" toState="Change">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="returnList" fromState="Change" toState="*">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

	</mx:transitions>
	
	<mx:Panel id="combinedPanel" height="100%" y="0" width="100%" x="0">
		<mx:HBox width="98%" horizontalAlign="right" horizontalGap="8" verticalAlign="middle" id="hbox1">
			<mx:Text id="error" styleName="error" htmlText="{_error}" color="#ff0033" width="98%"/>
			<mx:Button label="Create" id="btn_create" styleName="btn_create" click="createHandler(event);"/>
		</mx:HBox>
		<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" id="resource_grid" dataProvider="{viewModelLocator.stories}" rowCount="{viewModelLocator.storyCount}" width="100%" height="100%" dragEnabled="true" dropEnabled="true" dragMoveEnabled="true" dragDrop="handleDrop(event)">
				<mx:columns>
				<mx:DataGridColumn headerText="Name" dataField="name"/>
				<mx:DataGridColumn headerText="Iteration" labelFunction="ViewHelper.formatIteration" sortCompareFunction="ViewHelper.sortIteration"/>
				<mx:DataGridColumn headerText="Owner" labelFunction="ViewHelper.formatIndividual" sortCompareFunction="ViewHelper.sortIndividual"/>
				<mx:DataGridColumn headerText="Effort" dataField="effort"/>		 
				<mx:DataGridColumn headerText="Status" labelFunction="ViewHelper.formatStatus" sortCompareFunction="ViewHelper.sortStatus"/>		 
				<mx:DataGridColumn headerText="Priority" dataField="priority"/>		 
				<mx:DataGridColumn editable="false" width="120" sortable="false"> 
					<mx:itemRenderer> 
						<mx:Component>
							<mx:Box direction="horizontal">
								<mx:LinkButton label="Edit" click="outerDocument.updateHandler(event);"/>		 	
								<mx:LinkButton label="Delete" click="outerDocument.deleteHandler(event);"/>		 	
							</mx:Box> 
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:Panel>
</mx:Canvas>