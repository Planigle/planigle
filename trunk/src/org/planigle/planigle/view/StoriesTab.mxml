<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="org.planigle.planigle.view.controls.*" xmlns:component="org.planigle.planigle.view.components.*" name="Stories" label="Stories" creationComplete="created(event)">
	<mx:Script>
		<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.rpc.events.ResultEvent;
		import mx.managers.PopUpManager;
		import mx.controls.Alert;
		import mx.controls.DataGrid;
		import mx.events.DataGridEvent;
		import mx.events.DragEvent;
		import mx.events.CloseEvent;
		import mx.events.ListEvent;
		import mx.binding.utils.ChangeWatcher;
		import org.planigle.planigle.model.ViewModelLocator;
		import org.planigle.planigle.model.IndividualFactory;
		import org.planigle.planigle.model.Individual;
		import org.planigle.planigle.model.IterationFactory;
		import org.planigle.planigle.model.Iteration;
		import org.planigle.planigle.model.StoryFactory;
		import org.planigle.planigle.model.Story;
		import org.planigle.planigle.events.StoryChangedEvent;
		import org.planigle.planigle.view.components.SelectItem;
		
		[Bindable]
		private var _error:String;

		[Bindable]
		private var viewModelLocator:ViewModelLocator = ViewModelLocator.getInstance();

		[Bindable]
		public var factory:IndividualFactory = IndividualFactory.getInstance();

		[Bindable] // List of iterations plus All and Backlog
		private var iterationFilter:ArrayCollection = new ArrayCollection();

		[Bindable] // List of individuals plus All and None
		private var individualFilter:ArrayCollection = new ArrayCollection();

		[Bindable] // List of stories (filtered for selected iteration)
		private var filteredStories:ArrayCollection = new ArrayCollection();

		// Remember heights so they can be changed and restored.
		private var formIterationHeight:int;
		private var formAcceptanceHeight:int;
		private var formPublicHeight:int;

		// Set up event listeners.  Called when the canvas has been created.
		private function created(event:Event):void
		{
			currentState = 'Change';
			formIterationHeight = form_iteration.height;
			formAcceptanceHeight = form_acceptance_criteria.height;
			formPublicHeight = form_public.height;
			currentState = '';

			ChangeWatcher.watch( factory, "currentIndividual", resetState ); // Reset if log out / logged back in
			ChangeWatcher.watch( IterationFactory.getInstance(), "iterationSelector", updateIterationFilterList );
			ChangeWatcher.watch( IndividualFactory.getInstance(), "individualSelector", updateIndividualFilterList );
			ChangeWatcher.watch( StoryFactory.getInstance(), "stories", handleFilter );
			setIterationFilterList();
			setIndividualFilterList();
			handleFilter(event);
		}
		
		// Clear the error message.
		private function clearErrorMessage():void {_error = ""}
		
		// Reset my state to how it was initially.
		public function resetState(event:Event):void
		{
			currentItem = null;
			clearErrorMessage();
			currentState = '';
		}
		
		// Update the iterations in the filter list.
		private function updateIterationFilterList(event:Event):void
		{
			setIterationFilterList();
			handleFilter(event);
		}
		
		// Set the iterations in the filter list.
		private function setIterationFilterList():void
		{
			// Remember selection so that updating iterations doesn't revert it.
			var id:int = iteration.selectedItem ? iteration.selectedItem.id : -1;
			var selection:Iteration = null;

			var newFilter:ArrayCollection = new ArrayCollection();
			for (var i:int = 0; i < IterationFactory.getInstance().iterationSelector.length; i++)
			{
				var it:Iteration = Iteration(IterationFactory.getInstance().iterationSelector.getItemAt(i));
				newFilter.addItem(it);
				if (it.id == id)
					selection = it;
			}
			newFilter.addItem( new Iteration( <iteration><id>-1</id><name>All</name></iteration> ));
			iterationFilter = newFilter;
			if (selection)
				iteration.selectedItem = selection;
			else
			{
				var currentIteration:Iteration = IterationFactory.getInstance().current();
				if (currentIteration)
					iteration.selectedItem = currentIteration;
				else
					iteration.selectedIndex = iterationFilter.length - 1;
			}
		}
		
		// Update the individuals in the filter list.
		private function updateIndividualFilterList(event:Event):void
		{
			setIndividualFilterList();
			handleFilter(event);
		}
		
		// Set the individuals in the filter list.
		private function setIndividualFilterList():void
		{
			// Remember selection so that updating individuals doesn't revert it.
			var id:int = individual.selectedItem ? individual.selectedItem.id : -1;
			var selection:Individual = null;

			var newFilter:ArrayCollection = new ArrayCollection();
			for (var i:int = 0; i < IndividualFactory.getInstance().individualSelector.length; i++)
			{
				var it:Individual = Individual(IndividualFactory.getInstance().individualSelector.getItemAt(i));
				newFilter.addItem(it);
				if (it.id == id)
					selection = it;
			}
			newFilter.addItem( new Individual( <individual><id>-1</id><first-name>All</first-name></individual> ));
			individualFilter = newFilter;
			if (selection)
				individual.selectedItem = selection;
			else
				individual.selectedIndex = individualFilter.length - 1;
		}

		// Answer the stories for the selected iteration.
		private function getFilteredStories():ArrayCollection
		{
			var stories:ArrayCollection = new ArrayCollection();
			for (var i:int = 0; i < StoryFactory.getInstance().stories.length; i++)
			{
				var story:Story = Story(StoryFactory.getInstance().stories.getItemAt(i));
				if (matchesIterationFilter(story) && matchesIndividualFilter(story) && matchesStatusFilter(story))
					stories.addItem(story);
			}
			return stories;
		}

		// Answer whether the story matches the iteration filter.
		private function matchesIterationFilter( story:Story ):Boolean
		{
			return iteration.selectedItem.id == -1 || story.iterationId == iteration.selectedItem.id;
		}

		// Answer whether the story matches the individual filter.
		private function matchesIndividualFilter( story:Story ):Boolean
		{
			return individual.selectedItem.id == -1 || story.ownerId == individual.selectedItem.id;
		}

		// Answer whether the story matches the status filter.
		private function matchesStatusFilter( story:Story ):Boolean
		{
			return status.selectedItem.value == -1 ||
				(status.selectedItem.value == -2 && (story.statusCode == Story.CREATED || story.statusCode == Story.IN_PROGRESS)) ||
				status.selectedItem.value == story.statusCode;
		}
		
		// The iteration filter has changed.
		public function handleFilter(event:Event):void
		{
			var stories:ArrayCollection = getFilteredStories();
			column_iteration.visible = iteration.selectedItem.id == -1;
			var storiesAndTasks:ArrayCollection = new ArrayCollection;
			for (var i:int = 0; i < stories.length; i++)
			{
				var story:Story = Story(stories.getItemAt(i));
				storiesAndTasks.addItem(story);
				if (story.isExpanded())
					for (var j:int = 0; j < story.tasks.length; j++)
						storiesAndTasks.addItem(story.tasks.getItemAt(j));
			}
			filteredStories = storiesAndTasks;
			btn_add_existing.visible = shouldShowExisting();
		}
		
		// Expand / collapse a story.
		public function expand(event:Event) : void
		{
			if (resource_grid.selectedItem.isStory())
				{
				resource_grid.selectedItem.toggleExpanded();
				handleFilter(event);
				}
		}

		// Show the surveys for this project.
		private function handleSurveys(event:Event):void
		{
			currentState = "Survey";
		}
		
		// Add an existing story to this iteration.
		private function handleAdd(event:Event):void
		{
			var stories:ArrayCollection = new ArrayCollection();
			for (var i:int = 0; i < StoryFactory.getInstance().stories.length; i++)
			{
				var story:Story = Story(StoryFactory.getInstance().stories.getItemAt(i));
				if (story.statusCode != Story.ACCEPTED && story.iterationId != iteration.selectedItem.id)
					stories.addItem(story);
			}
			var selector:SelectItem = SelectItem(PopUpManager.createPopUp(this, SelectItem, true));
			selector.title = "Select story(s) to add to this iteration";
			selector.items = stories;
			selector.selectFunction = addStory;
			PopUpManager.centerPopUp(selector);
		}
		
		private var addQueue:ArrayCollection = new ArrayCollection();
		
		// Add a story to the current iteration.
		private function addStory(stories:Array):void
		{
			for (var i:int = 0; i < stories.length; i++)
				addQueue.addItem({"story": Story(stories[i]), "iteration_id": iteration.selectedItem.id > 0 ? iteration.selectedItem.id : ""});
			handleAddStorySuccess(); // Prime the processing.
		}
		
		// A story was successfully added to the current iteration.
		private function handleAddStorySuccess():void
		{
			if (addQueue.length > 0)
			{
				var params:Object = addQueue.removeItemAt(0);
				params["story"].update({"record[iteration_id]": params["iteration_id"]}, handleAddStorySuccess, handleAddStoryFailure);
			}
			else
			{
				handleSuccess();
				handleFilter(null); // Update list of stories when done.
			}
		}

		// A story was not successfully added to the current iteration.
		private function handleAddStoryFailure(xml:XMLList):void
		{
			addQueue = new ArrayCollection(); // Cancel remaining adds
			handleFailure(xml);
			handleFilter(null); // Update list of stories for any changes that did work.
		}
		
		// Prepare the form for a story.
		private function prepareForStory():void
		{
			form_iteration.visible = true;
			form_iteration.height = formIterationHeight;
			form_acceptance_criteria.visible = true;
			form_acceptance_criteria.height = formAcceptanceHeight;
			form_public.visible = true;
			form_public.height = formPublicHeight;
		}
		
		// Prepare the form for a task.
		private function prepareForTask():void
		{
			form_iteration.visible = false;
			form_iteration.height = 0;
			form_acceptance_criteria.visible = false;
			form_acceptance_criteria.height = 0;
			form_public.visible = false;
			form_public.height = 0;
		}

		private var currentItem:Object; // Remember in case selection changes while form is open.

		// Show user a form to create a story.
		private function showCreateStory(event:Event):void
		{
			prepareForStory();
			currentItem = null;
			showCreate(true);
		}

		// Show user a form to create a task.
		public function showCreateTask(event:Event):void
		{
			prepareForTask();
			currentItem = resource_grid.selectedItem;
			showCreate(false);

			// Set default owner to that of the story.
			var it:int = int(currentItem.ownerId);
			if (it == 0)
				field_owner.selectedIndex = IndividualFactory.getInstance().individualSelector.length - 1;
			else
				field_owner.selectedItem = IndividualFactory.getInstance().find(it);
		}

		// Show user a form to create a resource.
		private function showCreate(isStory:Boolean):void
		{
			clearErrorMessage();
			currentState = 'Change';
			field_name.setFocus();
			field_name.text = '';
			field_description.text = '';
			
			if (isStory)
			{
				field_acceptance_criteria.text = '';
				if (iteration.selectedItem.id >= 0)
					field_iteration.selectedItem = iteration.selectedItem;
				else
					field_iteration.selectedIndex = IterationFactory.getInstance().iterationSelector.length - 1;
				field_owner.selectedItem = IndividualFactory.getInstance().currentIndividual;
			}

			field_effort.text = '';
			field_status.selectedIndex = 0;
			field_public.selectedIndex = ViewModelLocator.getInstance().projects.child("survey-mode") == 2 ? 0 : 1;
			btn_change.label = 'Create';
		}

		// Show user a form to update a resource.
		public function showUpdate(event:Event) : void
		{
			currentItem = resource_grid.selectedItem;
			if (currentItem)
			{
				clearErrorMessage();
				currentState = 'Change';
				field_name.text = currentItem.name;
				field_name.setFocus();
				field_name.setSelection(0, field_name.text.length );
				field_description.text = currentItem.description;
				if (currentItem.isStory())
				{
					prepareForStory();
					field_iteration.selectedItem = IterationFactory.getInstance().find(currentItem.iterationId);
					field_acceptance_criteria.text = currentItem.acceptanceCriteria;
					field_public.selectedIndex = currentItem.isPublic ? 0 : 1;
				}
				else
					prepareForTask();
	
				var it:int = int(currentItem.ownerId);
				if (it == 0)
					field_owner.selectedIndex = IndividualFactory.getInstance().individualSelector.length - 1;
				else
					field_owner.selectedItem = IndividualFactory.getInstance().find(it);
	
				field_effort.text = currentItem.effort;
				field_status.selectedIndex = currentItem.statusCode;
				btn_change.label = 'Update';
			}
		}

		// Show user a form to split a story.
		public function showSplit(event:Event) : void
		{
			showUpdate(event);
			if (currentItem)
			{
				var splits:Array = currentItem.name.split(" ");
				if (int(splits[splits.length-1]) > 0)
					{ // Increment last component of name if an integer.
					splits[splits.length-1] = (int(splits[splits.length-1])+1).toString();
					field_name.text = splits.join(" ");
					field_name.setSelection(0, field_name.text.length );
					}
				field_iteration.selectedItem = IterationFactory.getInstance().find(currentItem.iterationId).next();
				btn_change.label = 'Split';
			}
		}

		// Confirm that user wants to delete the resource.
		public function showDelete(event:Event) : void
		{
			Alert.show("Are you sure you want to delete this?", "Delete", 3, this,
			function(event:CloseEvent):void
			{
				if (event.detail==Alert.YES)
				{
					clearErrorMessage();
					deleteResource(resource_grid.selectedItem);
				}
			});
		}
		
		// Create parameters for the user's request to the server.
		private function getParams(isStory:Boolean) : Object
		{
			var params:Object = new Object();
			params['record[name]'] = field_name.text;
			params['record[description]'] = field_description.text;
			params['record[individual_id]'] = field_owner.selectedItem.id > 0 ? field_owner.selectedItem.id : "";
			params['record[effort]'] = field_effort.text;
			params['record[status_code]'] = field_status.selectedItem.value;
			if (isStory)
			{
				params['record[iteration_id]'] = field_iteration.selectedItem.id > 0 ? field_iteration.selectedItem.id : "";
				params['record[acceptance_criteria]'] = field_acceptance_criteria.text;
				params['record[public]'] = field_public.selectedItem.value;
			}
			return params;
		}

		// Tell the server to change a resource.
		private function changeResource(event:Event) : void
		{
			if (btn_change.label == 'Create')
			{
				if (currentItem)
					currentItem.createTask(getParams(false), handleCreateSuccess, handleFailure);
				else
					StoryFactory.getInstance().createStory(getParams(true), handleCreateSuccess, handleFailure);
			}
			else if (btn_change.label == 'Update')
				currentItem.update(getParams(currentItem.isStory()), currentItem.isStory() ? handleUpdateStorySuccess : handleSuccess, handleFailure);
			else
				currentItem.split(getParams(currentItem.isStory()), handleSuccess, handleFailure);
		}
		
		// A story was successfully updated.
		private function handleUpdateStorySuccess():void
		{
			handleSuccess();
			handleFilter(null); // Update list of stories when done.
		}

		// Tell the server to delete a resource.
		private function deleteResource(resource:Object):void
		{
			resource.destroy(null, handleFailure);
		}

		// Handle a successful create.
		private function handleCreateSuccess():void
		{
			showCreate(currentItem == null);
			_error = currentItem == null ? "Story was successfully created." : "Task was successfully created."
		}

		// Handle a successful change.
		private function handleSuccess():void
		{
			resetState(null);
		}

		// Handle errors when making changes.
		private function handleFailure(error:XMLList):void
		{
			_error = error;
		}
		
		private const PRIORITY:int = 7;
		private var sort:int = PRIORITY;

		// The user is reordering the stories.  Don't allow them to move tasks.
		private function handleDrag(event:DragEvent):void
		{
			var o:Object = DataGrid(event.dragInitiator).selectedItem;
			if (!o.isStory()) // Can't drag tasks
				event.preventDefault();
			if (sort != PRIORITY)
			{
				Alert.show("You can only drag and drop to prioritize after sorting by priority.");
				event.preventDefault();
			}
		}
		
		// The user has reordered the stories.
		private function handleDrop(event:DragEvent):void
		{
			var stories:ArrayCollection = filteredStories;
			var movedItems:Array = event.dragSource.dataForFormat("items") as Array;
			var story:Story = Story(movedItems[0]);
			var newIndex:int = resource_grid.calculateDropIndex(event);
			var before:Number = 0;
			var after:Number = 0;
			var itemAtIndex:Story = null;
			if (newIndex == stories.length) // Move to end
			{
				itemAtIndex = Story(stories.getItemAt(newIndex - 1));
				if (itemAtIndex == story)
					return; // Not moved
				before = itemAtIndex.priority;
				after = before + 1;
			}
			else
			{
				itemAtIndex = Story(stories.getItemAt(newIndex));
				if (itemAtIndex == story)
					return; // Not moved
				before = newIndex == 0 ? itemAtIndex.priority - 1 : (stories.getItemAt(newIndex-1).priority);
				after = itemAtIndex.priority;
			}
			story.update({"record[priority]": (before+after)/2}, handleSuccess, handleFailure);
		}

		// Prepare for sorting by collapsing all stories.
		private function prepareSort(event:DataGridEvent):void
		{
			sort = event.columnIndex;
			var changes:Boolean = false;
			for(var i:int = 0; i < filteredStories.length; i++)
			{
				var object:Object = filteredStories.getItemAt(i);
				if (object.isStory() && object.isExpanded())
				{
					changes = true;
					object.collapse();
				}
			}
			if (changes)
				handleFilter(event);
		}
		
		// Answer the color to use for a row.
		private function rowColor(item:Object, color:uint) : uint
		{
			return (item && item.backgroundColor() >= 0) ? item.backgroundColor() : color;
		}
		
		// The user has updated the story / task status in the table.
		public function updateStatus(item:Object, event:ListEvent):void
		{
			var recalc:Boolean = item.statusCode == 2 && event.target.selectedIndex < 2;
			item.update({"record[status_code]": event.target.selectedIndex}, handleUpdateStorySuccess, handleFailure);
			if (recalc)
				new StoryChangedEvent().dispatch();
		}

		// Answer whether to show (based on whether the item is a story and the user has rights).
		public function shouldShowStory(data:Object):Boolean
		{
			return data.isStory() && shouldShow(data);
		}

		// Answer whether to show (based on whether the user has rights).
		public function shouldShow(data:Object):Boolean
		{
			return factory.currentIndividual.isAtLeastProjectUser();
		}

		// Answer whether to show existing (based on current selection and whether the user has rights).
		public function shouldShowExisting():Boolean
		{
			return iteration.selectedItem.id != -1 && factory.currentIndividual.isAtLeastProjectUser();
		}
		]]>
	</mx:Script>
 	
	<mx:states>
		<mx:State name="Change">
			<mx:RemoveChild target="{btn_create}"/>
			<mx:AddChild relativeTo="{resource_grid}" position="before">
				<mx:target>
					<mx:Form id="change_form" defaultButton="{btn_change}">
						<mx:FormItem label='Name' required="true">
							<mx:TextInput id='field_name' maxChars="250" text='' width="700"/>
						</mx:FormItem>
						<mx:FormItem label='Description'>
							<mx:TextArea id='field_description' maxChars="4096" height="64" width="500"><mx:text/></mx:TextArea>
						</mx:FormItem>
						<mx:FormItem label='Acceptance Criteria' id="form_acceptance_criteria">
							<mx:TextArea id='field_acceptance_criteria' maxChars="4096" height="64" width="500"><mx:text/></mx:TextArea>
						</mx:FormItem>
						<mx:FormItem label="Iteration" id="form_iteration">
							<mx:ComboBox id='field_iteration' width="350" editable="false" dataProvider="{IterationFactory.getInstance().iterationSelector}" labelField="name"></mx:ComboBox>
						</mx:FormItem>
						<mx:FormItem label='Owner'>
							<mx:ComboBox id='field_owner' width="350" editable="false" dataProvider="{IndividualFactory.getInstance().individualSelector}" labelField="fullName"></mx:ComboBox>
						</mx:FormItem>
						<mx:FormItem label='Effort'>
							<mx:TextInput id='field_effort' restrict="0-9." text='' width="350"/>
						</mx:FormItem>
						<mx:FormItem label='Status'>
							<mx:ComboBox id='field_status' width="350" editable="false">
								<mx:Object label="Created" value="0" />
								<mx:Object label="In Progress" value="1" />
								<mx:Object label="Accepted" value="2" />
							</mx:ComboBox>
						</mx:FormItem>
						<mx:FormItem label='Public' id="form_public">
							<mx:ComboBox id='field_public' width="350" editable="false">
								<mx:Object label="true" value='true' />
								<mx:Object label="false" value='false' />
							</mx:ComboBox>
						</mx:FormItem>
						<mx:ControlBar width="100%">
							<mx:Spacer width="50"/>
							<mx:Button label="Change" id="btn_change" click="changeResource(event)"/>
							<mx:LinkButton label="Cancel" id="btn_cancel" click="resetState(event)"/>
						</mx:ControlBar>
					</mx:Form>	
				</mx:target>
			</mx:AddChild>
		</mx:State>
		<mx:State name="Survey">
			<mx:AddChild relativeTo="{combinedPanel}" position="before">
				<mx:target>
					<component:ViewSurveys id="surveysView" done="resetState(event)">
					</component:ViewSurveys>
				</mx:target>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition id="changeItem" fromState="*" toState="Change">
			<mx:Sequence targets="{[btn_box, combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:SetPropertyAction target="{owner_form}" name="visible" value="false"/>
				<mx:SetPropertyAction target="{status_form}" name="visible" value="false"/>
				<mx:SetPropertyAction target="{iteration_form}" name="visible" value="false"/>
				<mx:SetPropertyAction target="{btn_create}" name="visible" value="false"/>
				<mx:SetPropertyAction target="{btn_add_existing}" name="visible" value="false"/>
				<mx:SetPropertyAction target="{btn_view_surveys}" name="visible" value="false"/>
				<mx:SetPropertyAction target="{iteration_form}" name="height" value="0"/>
				<mx:SetPropertyAction target="{owner_form}" name="height" value="0"/>
				<mx:SetPropertyAction target="{status_form}" name="height" value="0"/>
				<mx:SetPropertyAction target="{btn_create}" name="height" value="0"/>
				<mx:SetPropertyAction target="{btn_add_existing}" name="height" value="0"/>
				<mx:SetPropertyAction target="{btn_view_surveys}" name="height" value="0"/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="returnList" fromState="Change" toState="*">
			<mx:Sequence targets="{[btn_box, combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:SetPropertyAction target="{btn_view_surveys}" name="height" value="22"/>
				<mx:SetPropertyAction target="{btn_add_existing}" name="height" value="22"/>
				<mx:SetPropertyAction target="{btn_create}" name="height" value="22"/>
				<mx:SetPropertyAction target="{iteration_form}" name="height" value="22"/>
				<mx:SetPropertyAction target="{owner_form}" name="height" value="22"/>
				<mx:SetPropertyAction target="{status_form}" name="height" value="22"/>
				<mx:SetPropertyAction target="{btn_view_surveys}" name="visible" value="true"/>
				<mx:SetPropertyAction target="{btn_add_existing}" name="visible" value="{iteration.selectedItem.id != -1}"/>
				<mx:SetPropertyAction target="{btn_create}" name="visible" value="{factory.currentIndividual.isAtLeastProjectUser()}"/>
				<mx:SetPropertyAction target="{iteration_form}" name="visible" value="true"/>
				<mx:SetPropertyAction target="{owner_form}" name="visible" value="true"/>
				<mx:SetPropertyAction target="{status_form}" name="visible" value="true"/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="survey" fromState="*" toState="Survey">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:SetPropertyAction target="{combinedPanel}" name="visible" value="false"/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="survey2" fromState="Survey" toState="*">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:SetPropertyAction target="{combinedPanel}" name="visible" value="true"/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>
	</mx:transitions>
	
	<mx:Panel id="combinedPanel" height="100%" y="0" width="100%" x="0">
		<mx:HBox id="btn_box" width="100%" horizontalAlign="left" paddingTop="5" paddingLeft="5" paddingRight="5">
			<mx:VBox width="100%">
				<mx:HBox width="100%">
					<mx:FormItem id="iteration_form" label="Iteration:">
						<mx:ComboBox id='iteration' width="150" editable="false" dataProvider="{iterationFilter}" labelField="name" change="handleFilter(event)"></mx:ComboBox>
					</mx:FormItem>
					<mx:FormItem id="owner_form" label="Owner:">
						<mx:ComboBox id='individual' width="150" editable="false" dataProvider="{individualFilter}" labelField="fullName" change="handleFilter(event)"></mx:ComboBox>
					</mx:FormItem>
					<mx:FormItem id="status_form" label="Status:">
						<mx:ComboBox id='status' width="150" editable="false" change="handleFilter(event)" selectedIndex="2">
							<mx:Object label="Created" value="0" />
							<mx:Object label="In Progress" value="1" />
							<mx:Object label="Not Accepted" value="-2" />
							<mx:Object label="Accepted" value="2" />
							<mx:Object label="All" value="-1" />
						</mx:ComboBox>
					</mx:FormItem>
				</mx:HBox>
				<mx:Text id="error" styleName="error" htmlText="{_error}" color="#ff0033" width="100%"/>
			</mx:VBox>
			<mx:Button label="Add Existing" click="handleAdd(event);" id="btn_add_existing" visible="{shouldShowExisting()}"/>
			<mx:Button label="Create" styleName="btn_create" click="showCreateStory(event);" id="btn_create" visible="{factory.currentIndividual.isAtLeastProjectUser()}"/>
			<mx:Button label="View Surveys" click="handleSurveys(event);" id="btn_view_surveys"/>
		</mx:HBox>
		<local:ColoredBackgroundDataGrid id="resource_grid" variableRowHeight="true" dataProvider="{filteredStories}" rowCount="{filteredStories.length}" width="100%" height="100%" dragEnabled="{factory.currentIndividual.isAtLeastProjectUser()}" dropEnabled="true" dragMoveEnabled="true" dragStart="handleDrag(event)" dragDrop="handleDrop(event)" rowColorFunction="rowColor" headerRelease="prepareSort(event)" doubleClickEnabled="{factory.currentIndividual.isAtLeastProjectUser()}" doubleClick="showUpdate(event)">
			<local:columns>
				<mx:DataGridColumn editable="false" width="5" sortable="false"> 
					<mx:itemRenderer> 
						<mx:Component>
							<mx:Box direction="horizontal" horizontalGap="0">
								<mx:LinkButton label="{data.expandLabel()}" click="outerDocument.expand(event);"/>		 	
							</mx:Box>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Name" wordWrap="true" width="350" dataField="listName" showDataTips="true" dataTipField="description" />
				<mx:DataGridColumn id="column_iteration" width="150" headerText="Iteration" labelFunction="ViewHelper.formatIteration" sortCompareFunction="ViewHelper.sortIteration"/>
				<mx:DataGridColumn headerText="Owner" width="150" labelFunction="ViewHelper.formatIndividual" sortCompareFunction="ViewHelper.sortIndividual"/>
				<mx:DataGridColumn headerText="Effort" width="75" dataField="calculatedEffort" sortCompareFunction="ViewHelper.sortEffort"/>
				<mx:DataGridColumn editable="false" width="120" minWidth="120" headerText="Status" sortCompareFunction="ViewHelper.sortStatus">
					<mx:itemRenderer> 
						<mx:Component>
							<mx:Box direction="horizontal" horizontalGap="0">
							<mx:ComboBox width="100%" editable="false" selectedIndex="{data.statusCode}" change="outerDocument.updateStatus(data, event)" enabled="{outerDocument.factory.currentIndividual.isAtLeastProjectUser()}">
								<mx:Object label="Created" value="0" />
								<mx:Object label="In Progress" value="1" />
								<mx:Object label="Accepted" value="2" />
							</mx:ComboBox>
							</mx:Box>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Public" width="80" dataField="isPublic"/>
				<mx:DataGridColumn headerText="Priority" width="80" dataField="normalizedPriority" sortCompareFunction="ViewHelper.sortPriority"/>
				<mx:DataGridColumn headerText="User Priority" width="90" dataField="userPriority" sortCompareFunction="ViewHelper.sortUserPriority"/>
				<mx:DataGridColumn editable="false" width="140" minWidth="140" sortable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Box direction="horizontal" horizontalGap="0" width="100%">
								<mx:LinkButton id="storyEdit" icon="{parentApplication.imgEdit}" toolTip="Edit" click="outerDocument.showUpdate(event);" visible="{outerDocument.shouldShow(data)}"/>
								<mx:LinkButton id="storyDelete" icon="{parentApplication.imgCross}" toolTip="Delete" click="outerDocument.showDelete(event);" visible="{outerDocument.shouldShow(data)}"/>
								<mx:LinkButton id="taskAdd" icon="{parentApplication.imgAdd}" toolTip="Add Task" click="outerDocument.showCreateTask(event);" visible="{outerDocument.shouldShowStory(data)}"/>
								<mx:LinkButton id="storySplit" icon="{parentApplication.imgExport}" toolTip="Split" click="outerDocument.showSplit(event);" visible="{outerDocument.shouldShowStory(data)}"/>
							</mx:Box>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</local:columns>
		</local:ColoredBackgroundDataGrid>
	</mx:Panel>
</mx:Canvas>