<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="org.planigle.planigle.view.controls.*" xmlns:component="org.planigle.planigle.view.components.*" name="Stories" label="Stories" borderThicknessLeft="2" borderThicknessRight="2" headerHeight="0" creationComplete="created(event)">
	<mx:Script>
		<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.rpc.events.ResultEvent;
		import mx.managers.PopUpManager;
		import mx.controls.Alert;
		import mx.controls.DataGrid;
		import mx.events.DataGridEvent;
		import mx.events.DragEvent;
		import mx.events.CloseEvent;
		import mx.events.ListEvent;
		import mx.binding.utils.ChangeWatcher;
		import org.planigle.planigle.model.ViewModelLocator;
		import org.planigle.planigle.model.ProjectFactory;
		import org.planigle.planigle.model.IndividualFactory;
		import org.planigle.planigle.model.Individual;
		import org.planigle.planigle.model.Team;
		import org.planigle.planigle.model.ReleaseFactory;
		import org.planigle.planigle.model.Release;
		import org.planigle.planigle.model.IterationFactory;
		import org.planigle.planigle.model.Iteration;
		import org.planigle.planigle.model.StoryFactory;
		import org.planigle.planigle.model.Story;
		import org.planigle.planigle.model.Task;
		import org.planigle.planigle.events.StoryChangedEvent;
		import org.planigle.planigle.view.components.SelectItem;
		import org.planigle.planigle.view.components.UpdateItems;
		import org.planigle.planigle.view.components.EnterText;
		
		[Bindable]
		private var _error:String;

		[Bindable]
		private var viewModelLocator:ViewModelLocator = ViewModelLocator.getInstance();

		[Bindable]
		public var factory:IndividualFactory = IndividualFactory.getInstance();

		[Bindable] // List of releases plus All Releases
		private var releaseFilter:ArrayCollection = new ArrayCollection();

		[Bindable] // List of iterations plus Backlog and All Iterations
		private var iterationFilter:ArrayCollection = new ArrayCollection();

		[Bindable] // List of teams plus All Teams and No Team
		private var teamFilter:ArrayCollection = new ArrayCollection();

		[Bindable] // List of individuals plus All Owners and No Owner
		private var individualFilter:ArrayCollection = new ArrayCollection();

		[Bindable] // List of stories (filtered for selected iteration)
		private var filteredStories:ArrayCollection = new ArrayCollection();

		[Bindable]
		private var panelHeight:int;

		// Set up event listeners.  Called when the canvas has been created.
		private function created(event:Event):void
		{
			panelHeight = combinedPanel.height;
			ChangeWatcher.watch( factory, "currentIndividual", setTeamWatcher );
			ChangeWatcher.watch( IndividualFactory.current(), "projectId", setTeamWatcher );
			ChangeWatcher.watch( factory, "currentIndividual", resetState ); // Reset if log out / logged back in
			ChangeWatcher.watch( ReleaseFactory.getInstance(), "releaseSelector", updateReleaseFilterList );
			ChangeWatcher.watch( IterationFactory.getInstance(), "iterationSelector", updateIterationFilterList );
			ChangeWatcher.watch( IndividualFactory.getInstance(), "individualSelector", updateIndividualFilterList );
			ChangeWatcher.watch( StoryFactory.getInstance(), "stories", handleFilter );
			setReleaseFilterList();
			setIterationFilterList();
			setTeamWatcher(event);
			setIndividualFilterList();
			handleFilter(event);
		}

		private var watcher:ChangeWatcher;

		// Watch for changes to the teams.
		private function setTeamWatcher(event:Event):void
		{
			if (watcher)
				watcher.unwatch();
			if (IndividualFactory.current().project)
				watcher = ChangeWatcher.watch( IndividualFactory.current().project, "teams", updateTeamField );
			else watcher = null;
			updateTeamField(null);
		}

		// Update the teams in the form.
		private function updateTeamField(event:Event):void
		{
			if (IndividualFactory.current().project)
				storyFieldTeam.dataProvider = IndividualFactory.current().project.teamSelector;
		}
		// Set the error message.
		private function setMessage(message:String):void
		{
			_error = message;
			storyError.height = message == "" ? 0 : 22;
			vbox.setStyle( "verticalGap", message == "" ? 0 : 6 );
		}

		// Set the error message.
		private function setErrorMessage(message:String):void
		{
			storyError.setStyle("color","Red");
			setMessage(message);
		}

		// Set the success message.
		private function setSuccessMessage(message:String):void
		{
			storyError.setStyle("color","Green");
			setMessage(message);
		}

		// Clear the error message.
		private function clearErrorMessage():void {setMessage("")}
		
		// Reset my state to how it was initially.
		public function resetState(event:Event):void
		{
			currentItem = null;
			clearErrorMessage();
			currentState = '';
		}

		// Update the releases in the filter list.
		private function updateReleaseFilterList(event:Event):void
		{
			setReleaseFilterList();
			handleFilter(event);
		}
		
		// Set the releases in the filter list.
		private function setReleaseFilterList():void
		{
			// Remember selection so that updating releases doesn't revert it.
			var id:String = release.selectedItem ? release.selectedItem.id : "-2";
			var selection:Release = null;

			var newFilter:ArrayCollection = new ArrayCollection();
			for each (var it:Release in ReleaseFactory.getInstance().releaseSelector)
			{
				newFilter.addItem(it);
				if (it.id == id)
					selection = it;
			}
			var all:Release = new Release;
			all.id = "-1";
			all.name = "All Releases";
			newFilter.addItem( all );
			if (id == "-1")
				selection = Release(newFilter.getItemAt(newFilter.length - 1));
			releaseFilter = newFilter;
			if (selection)
				release.selectedItem = selection;
			else
			{
				var currentRelease:Release = ReleaseFactory.getInstance().current();
				if (currentRelease)
					release.selectedItem = currentRelease;
				else
					release.selectedIndex = releaseFilter.length - 1;
			}
			release.visible = releaseFilter.length > 2;
			release.width = release.visible ? 130 : 0;
		}
				
		// Update the iterations in the filter list.
		private function updateIterationFilterList(event:Event):void
		{
			setIterationFilterList();
			handleFilter(event);
		}
		
		// Set the iterations in the filter list.
		private function setIterationFilterList():void
		{
			// Remember selection so that updating iterations doesn't revert it.
			var id:String = iteration.selectedItem ? iteration.selectedItem.id : "-2";
			var selection:Iteration = null;

			var newFilter:ArrayCollection = new ArrayCollection();
			for each (var it:Iteration in IterationFactory.getInstance().iterationSelector)
			{
				if (!release.selectedItem || release.selectedItem.id == "-1" || it.id == "-1" || it.id == null || it.isIn(Release(release.selectedItem)))
				{
					newFilter.addItem(it);
					if (it.id == id)
						selection = it;
				}
			}
			var all:Iteration = new Iteration();
			all.populate( <iteration><id>-1</id><name>All Iterations</name></iteration> );
			newFilter.addItem(all);
			if (id == "-1")
				selection = Iteration(newFilter.getItemAt(newFilter.length - 1));
			iterationFilter = newFilter;
			if (selection)
				iteration.selectedItem = selection;
			else
			{
				var currentIteration:Iteration = IterationFactory.getInstance().current();
				if (currentIteration && (release.selectedItem.id == "-1" || currentIteration.isIn(Release(release.selectedItem))))
					iteration.selectedItem = currentIteration;
				else
					iteration.selectedIndex = iterationFilter.length - 1;
			}
		}
		
		// Update the individuals in the filter list.
		private function updateIndividualFilterList(event:Event):void
		{
			setIndividualFilterList();
			if (IndividualFactory.current().project)
				storyFieldOwner.dataProvider = IndividualFactory.current().project.individuals();
			handleFilter(event);
		}
		
		// Set the individuals in the filter list.
		private function setIndividualFilterList():void
		{
			// Remember selection so that updating individuals doesn't revert it.
			var id:String = individual.selectedItem ? individual.selectedItem.id : "-1";
			var selection:Individual = null;

			var newFilter:ArrayCollection = new ArrayCollection();
			if (IndividualFactory.current().project)
			{
				for each (var it:Individual in IndividualFactory.current().project.individuals())
				{
					newFilter.addItem(it);
					if (it.id == id)
						selection = it;
				}
			}
			var all:Individual = new Individual();
			all.populate( <individual><id>-1</id><first-name>All Owners</first-name></individual> );
			newFilter.addItem(all);
			individualFilter = newFilter;
			if (selection)
				individual.selectedItem = selection;
			else
				individual.selectedIndex = individualFilter.length - 1;
		}

		// Answer the stories for the selected iteration.
		private function getFilteredStories():ArrayCollection
		{
			var stories:ArrayCollection = new ArrayCollection();
			for each (var story:Story in StoryFactory.getInstance().stories)
			{
				if (matchesFilters(story))
					stories.addItem(story);
			}
			return stories;
		}

		// Answer whether a story matches the filters.
		private function matchesFilters(story:Story):Boolean
		{
			return matchesReleaseFilter(story) && matchesIterationFilter(story) && matchesTeamFilter(story) && matchesIndividualFilter(story) && matchesStatusFilter(story);
		}

		// Answer whether the story matches the release filter.
		private function matchesReleaseFilter(story:Story):Boolean
		{
			return !release.selectedItem || release.selectedItem.id == "-1" || story.releaseId == release.selectedItem.id;
		}

		// Answer whether the story matches the iteration filter.
		private function matchesIterationFilter(story:Story):Boolean
		{
			return !iteration.selectedItem || iteration.selectedItem.id == "-1" || story.iterationId == iteration.selectedItem.id;
		}

		// Answer whether the story matches the team filter.
		private function matchesTeamFilter(story:Story):Boolean
		{
			return !team.selectedItem || team.selectedItem.id == "-1" || story.teamId == team.selectedItem.id;
		}

		// Answer whether the story matches the individual filter.
		private function matchesIndividualFilter(story:Story):Boolean
		{
			return !individual.selectedItem || individual.selectedItem.id == "-1" || story.individualId == individual.selectedItem.id;
		}

		// Answer whether the story matches the storyStatus filter.
		private function matchesStatusFilter(story:Story):Boolean
		{
			return storyStatus.selectedItem.value == -1 ||
				(storyStatus.selectedItem.value == -2 && (story.statusCode == Story.CREATED || story.statusCode == Story.IN_PROGRESS || story.statusCode == Story.BLOCKED)) ||
				storyStatus.selectedItem.value == story.statusCode;
		}

		// Handle filtering by release.
		public function handleReleaseFilter(event:Event):void
		{
			setIterationFilterList(); // Since release affects iterations shown.
			handleFilter(event);
		}
		
		// The iteration filter has changed.
		public function handleFilter(event:Event):void
		{
			storyColumnIteration.visible = !iteration.selectedItem || iteration.selectedItem.id == "-1";
			storyColumnTeam.visible = IndividualFactory.current().project && IndividualFactory.current().project.teams.length > 0 && (!team.selectedItem || team.selectedItem.id == "-1");
			storyColumnIndividual.visible = !individual.selectedItem || individual.selectedItem.id == "-1";
			var justStories:ArrayCollection = getFilteredStories();
			storiesCount.text = justStories.length.toString();
			var storiesAndTasks:ArrayCollection = new ArrayCollection;
			for each (var story:Story in justStories)
			{
				storiesAndTasks.addItem(story);
				if (story.isExpanded())
					for each (var task:Task in story.tasks)
						storiesAndTasks.addItem(task);
			}
			filteredStories = storiesAndTasks;
			storyBtnAddExisting.visible = shouldShowExisting();
			updateVelocity(event);
		}

		// Update the velocity.
		private function updateVelocity(event:Event):void
		{
			if (individual.selectedItem && individual.selectedItem.id != "-1")
				velocity.dataProvider = individual.selectedItem;
			else
				velocity.dataProvider = IndividualFactory.current().project;
			velocity.rowCount = 1;
		}
		
		// Expand / collapse a story.
		public function expand(event:Event) : void
		{
			if (storyResourceGrid.selectedItem.isStory())
				{
				storyResourceGrid.selectedItem.toggleExpanded();
				handleFilter(event);
				}
		}

		// Show the surveys for this project.
		private function handleSurveys(event:Event):void
		{
			currentState = "Survey";
		}
		
		// Add an existing story to this iteration.
		private function handleAdd(event:Event):void
		{
			var stories:ArrayCollection = new ArrayCollection();
			for each (var story:Story in StoryFactory.getInstance().stories)
			{
				if (story.statusCode != Story.ACCEPTED && story.iterationId != iteration.selectedItem.id)
					stories.addItem(story);
			}
			var selector:SelectItem = SelectItem(PopUpManager.createPopUp(this, SelectItem, true));
			selector.title = "Select story(s) to add to this iteration";
			selector.items = stories;
			selector.selectFunction = addStory;
			PopUpManager.centerPopUp(selector);
		}
		
		private var updateQueue:ArrayCollection = new ArrayCollection();
		
		// Add a story to the current iteration.
		private function addStory(stories:Array):void
		{
			var params:Object = new Object();
			if (iteration.selectedItem && iteration.selectedItem.id != "-1")
			{
				params["record[iteration_id]"] = iteration.selectedItem.id ? iteration.selectedItem.id : "";
				var defaultRelease:Release = iteration.selectedItem.defaultRelease();
				if ( defaultRelease && defaultRelease.id )
					params["record[release_id]"] = defaultRelease.id; // Might be overriden below
			}
			if (release.selectedItem && release.selectedItem.id != "-1")
				params["record[release_id]"] = release.selectedItem.id ? release.selectedItem.id : "";
			if (team.selectedItem && team.selectedItem.id != "-1")
				params["record[team_id]"] = team.selectedItem.id ? team.selectedItem.id : "";
			if (individual.selectedItem && individual.selectedItem.id != "-1")
				params["record[individual_id]"] = individual.selectedItem.id ? individual.selectedItem.id : "";
			for each (var story:Story in stories)
				updateItem(story, params);
			handleUpdateSuccess(); // Prime the processing.
		}
		
		// An item was successfully updated.
		private function handleUpdateSuccess():void
		{
			if (updateQueue.length > 0)
				processQueue();
			else
			{
				updateStories();
				if (updateQueue.length > 0)
					processQueue();
				else
				{
					handleSuccess();
					if (recalc)
					{
						new StoryChangedEvent().dispatch();
						recalc = false;
					}
					else
						handleFilter(null); // Update list of stories when done.
				}
			}
		}

		// Process the next item in the queue.
		private function processQueue():void
		{
			var params:Object = updateQueue.removeItemAt(0);
			params["item"].update(params["params"], handleUpdateSuccess, handleUpdateFailure);
		}

		// If task changes have resulted in any changes to the stories, update them.
		private function updateStories():void
		{
			for each (var story:Story in StoryFactory.getInstance().stories)
			{
				var newStatus:int = story.newStatus();
				if (newStatus != -1)
					updateItem( story, {'record[status_code]': newStatus});
			}
		}

		// A story was not successfully updated.
		private function handleUpdateFailure(xml:XMLList):void
		{
			updateQueue = new ArrayCollection(); // Cancel remaining changes
			handleFailure(xml);
			if (recalc)
			{
				new StoryChangedEvent().dispatch();
				recalc = false;
			}
			else
				handleFilter(null); // Update list of stories when done.
		}
		
		// Prepare the form for a story.
		private function prepareForStory():void
		{
			storyFieldName.maxChars=250;
			storyFieldName.width=500;
			storyFormRelease.height = ReleaseFactory.getInstance().releaseSelector.length > 1 ? 22 : 0;
			storyFormRelease.visible = ReleaseFactory.getInstance().releaseSelector.length > 1;
			storyFormIteration.height = 22;
			storyFormIteration.visible = true;
			storyFormTeam.height = 22;
			storyFormTeam.visible = true;
			storyFormAcceptanceCriteria.height = 65;
			storyFormAcceptanceCriteria.visible = true;
			storyFormPublic.height = 22;
			storyFormPublic.visible = true;
		}
		
		// Prepare the form for a task.
		private function prepareForTask():void
		{
			storyFieldName.maxChars=40;
			storyFieldName.width=350;
			storyFormRelease.height = 0;
			storyFormRelease.visible = false;
			storyFormIteration.height = 0;
			storyFormIteration.visible = false;
			storyFormTeam.height = 0;
			storyFormTeam.visible = false;
			storyFormAcceptanceCriteria.height = 0;
			storyFormAcceptanceCriteria.visible = false;
			storyFormPublic.height = 0;
			storyFormPublic.visible = false;
		}

		private var currentItem:Object; // Remember in case selection changes while form is open.

		// Show user a form to create a story.
		private function showCreateStory(event:Event):void
		{
			prepareForStory();
			currentItem = null;
			showCreate(true);
		}

		// Show user a form to create a task.
		public function showCreateTask(event:Event):void
		{
			prepareForTask();
			currentItem = storyResourceGrid.selectedItem;
			showCreate(false);
			defaultTaskOwner();
		}

		// Default the task owner based on the story owner.
		private function defaultTaskOwner():void
		{
			var it:String = currentItem.individualId;
			if (!it)
				storyFieldOwner.selectedIndex = IndividualFactory.current().project.individuals().length - 1;
			else
				storyFieldOwner.selectedItem = IndividualFactory.getInstance().find(it);
		}

		// Show user a form to create a resource.
		private function showCreate(isStory:Boolean):void
		{
			clearErrorMessage();
			currentState = 'Change';
			storyFieldName.setFocus();
			storyFieldName.text = '';
			storyFieldDescription.text = '';
			storyFieldReasonBlocked.text = '';
			storyFormReasonBlocked.height = 0;
			storyFormReasonBlocked.visible = false;

			if (isStory)
			{
				storyFieldAcceptanceCriteria.text = '';

				if (iteration.selectedItem.id != "-1")
					storyFieldIteration.selectedItem = iteration.selectedItem;
				else
					storyFieldIteration.selectedIndex = IterationFactory.getInstance().iterationSelector.length - 1;

				storyFieldRelease.dataProvider = storyFieldIteration.selectedItem.releases();

				if (release.selectedItem.id != "-1")
					storyFieldRelease.selectedItem = release.selectedItem;
				else
					storyFieldRelease.selectedItem = storyFieldIteration.selectedItem.defaultRelease();

				if (team.selectedItem.id != "-1")
					storyFieldTeam.selectedItem = team.selectedItem;
				else
					storyFieldTeam.selectedIndex = IndividualFactory.current().project.teamSelector.length - 1;

				storyFieldPublic.selectedIndex = ProjectFactory.getInstance().projects.getItemAt(0).surveyMode  == 2 ? 0 : 1;
			}

			if (individual.selectedItem.id != "-1")
				storyFieldOwner.selectedItem = individual.selectedItem;
			else
				storyFieldOwner.selectedIndex = IndividualFactory.current().project.individuals().length - 1;

			storyFieldEffort.text = '';
			storyFieldStatus.selectedIndex = 0;
			storyBtnChange.label = 'Create';
		}

		// Show user a form to update a resource.
		public function showUpdate(event:Event) : void
		{
			if (storyResourceGrid.selectedItems.length > 1)
			{
				var updater:UpdateItems = UpdateItems(PopUpManager.createPopUp(this, UpdateItems, true));
				updater.title = "Select updates to apply to selected items";
				updater.init(Release(release.selectedItem), new ArrayCollection(storyResourceGrid.selectedItems), updateItem, handleUpdateSuccess);
				PopUpManager.centerPopUp(updater);
			}
			else
			{
				currentItem = storyResourceGrid.selectedItem;
				if (currentItem)
				{
					clearErrorMessage();
					currentState = 'Change';
					storyFieldName.text = currentItem.name;
					storyFieldName.setFocus();
					storyFieldName.setSelection(0, storyFieldName.text.length );
					storyFieldDescription.text = currentItem.description;
					var blocked:Boolean = currentItem.statusCode == Story.BLOCKED;
					storyFormReasonBlocked.height = blocked ? 64 : 0;
					storyFormReasonBlocked.visible = blocked;
					storyFieldReasonBlocked.text = currentItem.reasonBlocked;
					if (currentItem.isStory())
					{
						var iteration:Iteration = IterationFactory.getInstance().find(currentItem.iterationId);
						prepareForStory();
						storyFieldIteration.selectedItem = iteration;
						storyFieldRelease.dataProvider = iteration.releases();
						storyFieldRelease.selectedItem = ReleaseFactory.getInstance().find(currentItem.releaseId);
						storyFieldAcceptanceCriteria.text = currentItem.acceptanceCriteria;

						var it:String = currentItem.teamId;
						if (!it)
							storyFieldTeam.selectedIndex = IndividualFactory.current().project.teamSelector.length - 1;
						else
							storyFieldTeam.selectedItem = IndividualFactory.current().project.find(it);

						storyFieldPublic.selectedIndex = currentItem.isPublic ? 0 : 1;
					}
					else
						prepareForTask();
	
					var it2:String = currentItem.individualId;
					if (!it2)
						storyFieldOwner.selectedIndex = IndividualFactory.current().project.individuals().length - 1;
					else
						storyFieldOwner.selectedItem = IndividualFactory.getInstance().find(it2);
	
					storyFieldEffort.text = currentItem.effort;
					storyFieldStatus.selectedIndex = currentItem.statusCode;
					storyBtnChange.label = 'Update';
				}
			}
		}

		// Show user a form to split a story.
		public function showSplit(event:Event) : void
		{
			showUpdate(event);
			if (currentItem)
			{
				var splits:Array = currentItem.name.split(" ");
				if (int(splits[splits.length-1]) > 0)
					{ // Increment last component of name if an integer.
					splits[splits.length-1] = (int(splits[splits.length-1])+1).toString();
					storyFieldName.text = splits.join(" ");
					storyFieldName.setSelection(0, storyFieldName.text.length );
					}
				storyFieldIteration.selectedItem = IterationFactory.getInstance().find(currentItem.iterationId).next();
				storyFieldStatus.selectedIndex = 0; // Set to created
				storyBtnChange.label = 'Split';
			}
		}

		// Confirm that user wants to delete the resource.
		public function showDelete(event:Event) : void
		{
			var plural:String = storyResourceGrid.selectedItems.length > 1 ? 'items' : 'item';
			Alert.show("Are you sure you want to delete the selected "+plural+"?", "Delete", 3, this,
			function(event:CloseEvent):void
			{
				if (event.detail==Alert.YES)
				{
					clearErrorMessage();
					for each (var item:Object in storyResourceGrid.selectedItems )
						deleteResource(item);
				}
			});
		}
		
		// Create parameters for the user's request to the server.
		private function getParams(isStory:Boolean) : Object
		{
			var params:Object = new Object();
			params['record[name]'] = storyFieldName.text;
			params['record[description]'] = storyFieldDescription.text;
			params['record[reason_blocked]'] = storyFieldReasonBlocked.text;
			params['record[individual_id]'] = storyFieldOwner.selectedItem.id > 0 ? storyFieldOwner.selectedItem.id : "";
			params['record[effort]'] = storyFieldEffort.text;
			params['record[status_code]'] = storyFieldStatus.selectedItem.value;
			if (isStory)
			{
				params['record[project_id]'] = factory.currentIndividual.projectId;
				params['record[release_id]'] = storyFieldRelease.selectedItem.id > 0 ? storyFieldRelease.selectedItem.id : "";
				params['record[iteration_id]'] = storyFieldIteration.selectedItem.id > 0 ? storyFieldIteration.selectedItem.id : "";
				params['record[acceptance_criteria]'] = storyFieldAcceptanceCriteria.text;
				params['record[team_id]'] = storyFieldTeam.selectedItem.id > 0 ? storyFieldTeam.selectedItem.id : "";
				params['record[is_public]'] = storyFieldPublic.selectedItem.value;
			}
			return params;
		}

		// Tell the server to change a resource.
		private function changeResource(event:Event) : void
		{
			if (storyBtnChange.label == 'Create')
			{
				if (currentItem)
					currentItem.createTask(getParams(false), handleCreateSuccess, handleFailure);
				else
					StoryFactory.getInstance().createStory(getParams(true), handleCreateSuccess, handleFailure);
			}
			else if (storyBtnChange.label == 'Update')
			{
				var params2:Object = getParams(currentItem.isStory());
				updateItem(currentItem, params2);
				handleUpdateSuccess(); // Prime the processing.
			}
			else
			{	// Split and default to priority between current story and next in priority
				var params3:Object = getParams(true);
				var allStories:ArrayCollection = StoryFactory.getInstance().stories;
				var index:int = allStories.getItemIndex(currentItem);
				var nextPriority:Number = index + 1 == allStories.length ? currentItem.priority + 1 : allStories.getItemAt( index + 1 ).priority;
				params3['record[priority]'] = (currentItem.priority + nextPriority) / 2;
				currentItem.split(params3, handleSuccess, handleFailure);
			}
		}

		private var recalc:Boolean = false;

		// Update an item.
		private function updateItem(item:Object, params:Object): void
		{
			recalc = recalc || (item.isStory() && item.statusCode == Story.ACCEPTED && params['record[status_code]'] != null && params['record[status_code]'] < Story.ACCEPTED);
			updateQueue.addItem({"item": item, "params": params});
		}
		
		// Tell the server to delete a resource.
		private function deleteResource(resource:Object):void
		{
			resource.destroy(handleDeleteSuccess, handleFailure);
		}

		// Handle a successful delete.
		private function handleDeleteSuccess():void
		{
			for each (var story:Story in StoryFactory.getInstance().stories)
			{
				var newStatus:int = story.newStatus();
				if (newStatus != -1)
					story.update({'record[status_code]': newStatus}, null, handleFailure);
			}
		}

		// Handle a successful create.
		private function handleCreateSuccess(newItem:Object):void
		{
			if (currentItem)
			{
				var newStatus:int = currentItem.newStatus();
				if (newStatus != -1)
					currentItem.update({'record[status_code]': newStatus}, null, handleFailure);
			}
			showCreate(currentItem == null);
			if (currentItem != null) defaultTaskOwner();
			setSuccessMessage( currentItem == null ? "Story was successfully created." + (matchesFilters(Story(newItem)) ? "" : "  Story does not show in list due to current filtering.") : "Task was successfully created.");
		}

		// Handle a successful change.
		private function handleSuccess():void
		{
			resetState(null);
			updateVelocity(null);
		}

		// Handle errors when making changes.
		private function handleFailure(error:XMLList):void
		{
			setErrorMessage(error);
		}
		
		private const PRIORITY:int = 7;
		private var sort:int = PRIORITY;

		// The user is reordering the stories.  Don't allow them to move tasks.
		private function handleDrag(event:DragEvent):void
		{
			var movedItems:Array = DataGrid(event.dragInitiator).selectedItems;
			for each (var object:Object in movedItems)
			{
				if (!object.isStory()) // Can't drag tasks
				{
					event.preventDefault();
					return;
				}
			}
			if (sort != PRIORITY)
			{
				Alert.show("You can only drag and drop to prioritize after sorting by priority.");
				event.preventDefault();
			}
		}
		
		// The user has reordered the stories.
		private function handleReorder(event:DragEvent):void
		{
			// Eliminate the tasks from the list
			var stories:ArrayCollection = new ArrayCollection();
			for each (var item:Object in filteredStories)
				if (item.isStory()) stories.addItem(item);

			// Get the items to move
			var movedItems:Array = event.dragSource.dataForFormat("items") as Array;

			// Get the new index
			var newIndex:int = storyResourceGrid.calculateDropIndex(event);
			if (newIndex == filteredStories.length)
				newIndex = stories.length;
			else if (filteredStories.getItemAt(newIndex).isStory())
				newIndex = stories.getItemIndex(filteredStories.getItemAt(newIndex));
			else
				newIndex = stories.getItemIndex(filteredStories.getItemAt(newIndex).story) + 1;


			var before:Number = -1;
			var after:Number = -1;
			for (var i:int = movedItems.length - 1; i >= 0; i--)
			{ // Go backwards since these are in reverse order
				var story:Story = movedItems[i]
				if (newIndex == stories.length) // Move to end
				{
					if (before == -1) // If first story to move
					{
						var lastStory:Story = Story(stories.getItemAt(newIndex - 1));
						if (movedItems.length == 1 && lastStory == story)
							return; // Not moved
						before = lastStory.priority;
					}
					after = before + 1;
				}
				else
				{
					if (before == -1) // If first story to move
					{
						var itemAtIndex:Story = Story(stories.getItemAt(newIndex));
						if (movedItems.length == 1 && itemAtIndex == story)
							return; // Not moved
						before = newIndex == 0 ? itemAtIndex.priority - 1 : (stories.getItemAt(newIndex-1).priority);
					}
					after = itemAtIndex.priority;
				}
				before = (before+after)/2;
				updateItem(story, {"record[priority]": before });
			}
			handleUpdateSuccess(); // Prime the processing.
		}

		// Prepare for sorting by collapsing all stories.
		private function prepareSort(event:DataGridEvent):void
		{
			sort = event.columnIndex;
			var changes:Boolean = false;
			for each (var object:Object in filteredStories)
			{
				if (object.isStory() && object.isExpanded())
				{
					changes = true;
					object.collapse();
				}
			}
			if (changes)
				handleFilter(event);
		}
		
		// Answer the color to use for a row.
		private function rowColor(item:Object, color:uint) : uint
		{
			return (item && item.backgroundColor() >= 0) ? item.backgroundColor() : color;
		}

		private var statusEvent:Event;
		
		// The user has updated the story / task status in the table.
		public function updateStatus(item:Object, event:ListEvent):void
		{
			currentItem = item;
			statusEvent = event;
			if (event.target.selectedIndex == Story.BLOCKED)
			{
				var dialog:EnterText = EnterText(PopUpManager.createPopUp(this, EnterText, true));
				dialog.title = "Enter reason for blockage";
				dialog.init("Reason Blocked", updateStatusWithReason, cancelStatus);
				PopUpManager.centerPopUp(dialog);
			}
			else
			{
				updateItem(currentItem, {"record[status_code]": statusEvent.target.selectedIndex, 'record[reason_blocked]': ''});
				handleUpdateSuccess(); // Prime processing.
			}
		}

		// The user has canceled the change of status.
		public function cancelStatus():void
		{
			var current:int = currentItem.statusCode;
			currentItem.statusCode = Story.BLOCKED;
			currentItem.statusCode = current;
		}
		
		// The user has entered a reason for blocking (if appropriate).
		public function updateStatusWithReason(reason:String):void
		{
			updateItem(currentItem, {"record[status_code]": statusEvent.target.selectedIndex, 'record[reason_blocked]': reason});
			handleUpdateSuccess(); // Prime processing.
		}

		// Answer whether to show (based on whether the item is a story and the user has rights).
		public function shouldShowStory(data:Object):Boolean
		{
			return data.isStory() && shouldShow(data);
		}

		// Answer whether to show (based on whether the user has rights).
		public function shouldShow(data:Object):Boolean
		{
			return factory.currentIndividual.isAtLeastProjectUser();
		}

		// Answer whether to show existing (based on current selection and whether the user has rights).
		public function shouldShowExisting():Boolean
		{
			return iteration.selectedItem && iteration.selectedItem.id != "-1" && factory.currentIndividual.isAtLeastProjectUser();
		}

		// Update the release based on the change to the iteration.
		public function updateRelease():void
		{
			storyFieldRelease.dataProvider = storyFieldIteration.selectedItem.releases();
			storyFieldRelease.selectedItem = (release.selectedItem.id == "-1" || !release.selectedItem.id) ? storyFieldIteration.selectedItem.defaultRelease() : release.selectedItem;
		}

		// Answer the velocity for an item.
		private function velocityString(node:Object):String
		{
			var used:Number = node.velocityIn(filteredStories);
			var vel:Number = node.velocity;
			if (vel > 0)
			{
				var percent:int = 100 * used / vel;
				return used + " of " + vel.toFixed(1) + " (" + percent + "%) - " + node.name;
			}
			else
				return used + " of 0 - " + node.name;
		}

		// Answer the icon for velocity for an item.
		private function velocityIcon(node:Object):String
		{
			return null;
		}
		
		// Answer the color to use for velocity.
		private function velocityColor(item:Object) : uint
		{
			var used:Number = item.velocityIn(filteredStories);
			var vel:Number = item.velocity;
			if (vel > 0)
			{
				var percent:int = 100 * used / vel;
				return percent > 100 ? 0xFF0000 : 0x000000;
			}
			return used > 0 ? 0xFF0000 : 0x000000;
		}

		// Adjust the height of the velocity tree.
		private function adjustVelocityHeight(event:Event):void
		{
			// Create a collection
			var collect:ArrayCollection = new ArrayCollection();
			for each (var openItem:Object in velocity.openItems)
				collect.addItem(openItem);

			var count:int = 1;

			for each (var item:Object in collect)
			{
				var parent:Object = item.parent;
				var shown:Boolean = true;
				while (parent != null )
				{
					if (collect.getItemIndex(parent) < 0)
					{
						shown = false;
						break;
					}
					parent = parent.parent;
				}
				if (shown)
					count += velocity.dataDescriptor.getChildren(item).length;					
			}

			velocity.rowCount = count;
		}

		// Update fields based on new status.
		private function updateReasonBlocked(event:Event):void
		{
			var blocked:Boolean = storyFieldStatus.selectedIndex == Story.BLOCKED;
			storyFormReasonBlocked.height = blocked ? 64 : 0;
			storyFormReasonBlocked.visible = blocked;
			blocked ? null : storyFieldReasonBlocked.text = "";
		}
		]]>
	</mx:Script>
 	
	<mx:states>
		<mx:State name="Change">
			<mx:RemoveChild target="{storyBtnCreate}"/>
			<mx:AddChild relativeTo="{storyResourceGrid}" position="before">
				<mx:target>
					<mx:Panel width="100%" borderThicknessTop="0" borderThicknessLeft="0" borderThicknessRight="0" headerHeight="0">
						<mx:HBox>
							<mx:VBox>
								<mx:Form id="changeForm" defaultButton="{storyBtnChange}" paddingTop="0" paddingBottom="0" verticalGap="5">
									<mx:FormItem label='Name' required="true">
										<mx:TextInput id='storyFieldName' maxChars="250" text='' width="500"/>
									</mx:FormItem>
									<mx:FormItem label='Description'>
										<mx:TextArea id='storyFieldDescription' maxChars="4096" height="64" width="500"><mx:text/></mx:TextArea>
									</mx:FormItem>
									<mx:FormItem label='Acceptance Criteria' id="storyFormAcceptanceCriteria">
										<mx:TextArea id='storyFieldAcceptanceCriteria' maxChars="4096" height="64" width="500"><mx:text/></mx:TextArea>
									</mx:FormItem>
									<mx:FormItem label='Status'>
										<mx:ComboBox id='storyFieldStatus' width="350" editable="false" change="updateReasonBlocked(event)">
											<mx:Object label="Created" value="0" />
											<mx:Object label="In Progress" value="1" />
											<mx:Object label="Blocked" value="2" />
											<mx:Object label="Done" value="3" />
										</mx:ComboBox>
									</mx:FormItem>
									<mx:FormItem id='storyFormReasonBlocked' label='Reason Blocked'>
										<mx:TextArea id='storyFieldReasonBlocked' maxChars="4096" width="500" height="64"><mx:text/></mx:TextArea>
									</mx:FormItem>
									<mx:ControlBar width="100%">
										<mx:Spacer width="50"/>
										<mx:Button label="Change" id="storyBtnChange" click="changeResource(event)"/>
										<mx:LinkButton label="Cancel" id="storyBtnCancel" click="resetState(event)"/>
									</mx:ControlBar>
								</mx:Form>	
							</mx:VBox>
							<mx:VBox>
								<mx:Form id="changeForm2" defaultButton="{storyBtnChange}" paddingTop="0" paddingBottom="0" verticalGap="5">
									<mx:FormItem label="Iteration" id="storyFormIteration">
										<mx:ComboBox id='storyFieldIteration' width="350" editable="false" dataProvider="{IterationFactory.getInstance().iterationsInRelease(Release(release.selectedItem))}" labelField="name" change="updateRelease()"></mx:ComboBox>
									</mx:FormItem>
									<mx:FormItem label="Release" id="storyFormRelease">
										<mx:ComboBox id='storyFieldRelease' width="350" editable="false" labelField="name"></mx:ComboBox>
									</mx:FormItem>
									<mx:FormItem label='Team' id="storyFormTeam">
										<mx:ComboBox id='storyFieldTeam' width="350" editable="false" dataProvider="{IndividualFactory.current().project.teamSelector}" labelField="name"></mx:ComboBox>
									</mx:FormItem>
									<mx:FormItem label='Owner'>
										<mx:ComboBox id='storyFieldOwner' width="350" editable="false" dataProvider="{IndividualFactory.current().project.individuals()}" labelField="fullName"></mx:ComboBox>
									</mx:FormItem>
									<mx:FormItem label='Effort'>
										<mx:TextInput id='storyFieldEffort' restrict="0-9." text='' width="350"/>
									</mx:FormItem>
									<mx:FormItem label='Public' id="storyFormPublic">
										<mx:ComboBox id='storyFieldPublic' width="350" editable="false">
											<mx:Object label="true" value='true' />
											<mx:Object label="false" value='false' />
										</mx:ComboBox>
									</mx:FormItem>
								</mx:Form>	
							</mx:VBox>
						</mx:HBox>
					</mx:Panel>
				</mx:target>
			</mx:AddChild>
		</mx:State>
		<mx:State name="Survey">
			<mx:AddChild relativeTo="{combinedPanel}" position="before">
				<mx:target>
					<component:ViewSurveys id="surveysView" done="resetState(event)">
					</component:ViewSurveys>
				</mx:target>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition id="changeItem" fromState="*" toState="Change">
			<mx:Sequence targets="{[storyBtnBox, combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:SetPropertyAction target="{storyBtnBox}" name="visible" value="false"/>
				<mx:SetPropertyAction target="{storyBtnBox}" name="height" value="0"/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="returnList" fromState="Change" toState="*">
			<mx:Sequence targets="{[storyBtnBox, combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:SetPropertyAction target="{storyBtnBox}" name="height" value="null"/>
				<mx:SetPropertyAction target="{storyBtnBox}" name="visible" value="true"/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="survey" fromState="*" toState="Survey">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:SetPropertyAction target="{combinedPanel}" name="visible" value="false"/>
				<mx:SetPropertyAction target="{combinedPanel}" name="height" value="0"/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="survey2" fromState="Survey" toState="*">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:SetPropertyAction target="{combinedPanel}" name="visible" value="true"/>
				<mx:SetPropertyAction target="{combinedPanel}" name="height" value="{panelHeight}"/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>
	</mx:transitions>
	
	<mx:Panel id="combinedPanel" height="100%" y="0" width="100%" x="0" borderThicknessTop="0" borderThicknessLeft="0" borderThicknessRight="0" headerHeight="0">
		<mx:VBox id="vbox" width="100%" paddingTop="5" paddingLeft="5" paddingRight="5">
			<mx:VBox id="storyBtnBox" width="100%">
				<mx:HBox width="100%" horizontalAlign="left">
					<mx:HBox width="100%" id='topRow'>
						<mx:ComboBox id='release' width="115" editable="false" dataProvider="{releaseFilter}" labelField="name" change="handleReleaseFilter(event)"></mx:ComboBox>
						<mx:ComboBox id='iteration' width="115" editable="false" dataProvider="{iterationFilter}" labelField="name" change="handleFilter(event)"></mx:ComboBox>
						<component:TeamSelector id='team' change="handleFilter(event)"></component:TeamSelector>
						<mx:ComboBox id='individual' width="115" editable="false" dataProvider="{individualFilter}" labelField="fullName" change="handleFilter(event)"></mx:ComboBox>
						<mx:ComboBox id='storyStatus' width="116" editable="false" change="handleFilter(event)" selectedIndex="3">
							<mx:Object label="Created" value="0" />
							<mx:Object label="In Progress" value="1" />
							<mx:Object label="Blocked" value="2" />
							<mx:Object label="Not Done" value="-2" />
							<mx:Object label="Done" value="3" />
							<mx:Object label="All Statuses" value="-1" />
						</mx:ComboBox>
					</mx:HBox>
					<mx:Button label="Add Existing" click="handleAdd(event);" id="storyBtnAddExisting" visible="{shouldShowExisting()}"/>
					<mx:Button label="Create" click="showCreateStory(event);" id="storyBtnCreate" visible="{factory.currentIndividual.isAtLeastProjectUser()}"/>
					<mx:Button label="Update" click="showUpdate(event);" enabled="{storyResourceGrid.selectedItems.length > 0}" id="storyBtnUpdateMultiple" visible="{factory.currentIndividual.isAtLeastProjectUser()}"/>
					<mx:Button label="Delete" click="showDelete(event);" enabled="{storyResourceGrid.selectedItems.length > 0}" id="storyBtnDeleteMultiple" visible="{factory.currentIndividual.isAtLeastProjectUser()}"/>
					<mx:Button label="View Surveys" click="handleSurveys(event);" id="storyBtnViewSurveys"/>
				</mx:HBox>
				<mx:HBox width="100%" horizontalAlign="center">
					<mx:Label text="Number of Stories:" fontWeight="bold"/>
					<mx:Label id="storiesCount" text=""/>
					<mx:Label text="Velocity Used:" fontWeight="bold"/>
					<local:ColoredTree id="velocity" rowColorFunction="velocityColor" labelFunction="velocityString" iconFunction="velocityIcon" borderStyle="none" rowCount="1" itemOpen="adjustVelocityHeight(event)" itemClose="adjustVelocityHeight(event)" selectable="false" width="350"/>
				</mx:HBox>
			</mx:VBox>
			<mx:Text id="storyError" styleName="error" htmlText="{_error}" width="100%" height="0"/>
		</mx:VBox>
		<local:ColoredBackgroundDataGrid id="storyResourceGrid" variableRowHeight="true" dataProvider="{filteredStories}" rowCount="{filteredStories.length}" width="100%" height="100%" dragEnabled="{factory.currentIndividual.isAtLeastProjectUser()}" dropEnabled="true" dragMoveEnabled="true" dragStart="handleDrag(event)" dragDrop="handleReorder(event)" rowColorFunction="rowColor" headerRelease="prepareSort(event)" doubleClickEnabled="{factory.currentIndividual.isAtLeastProjectUser()}" doubleClick="showUpdate(event)" allowMultipleSelection="true">
			<local:columns>
				<mx:DataGridColumn editable="false" minWidth="20" width="20" sortable="false"> 
					<mx:itemRenderer> 
						<mx:Component>
							<mx:Box direction="horizontal" horizontalGap="0">
								<mx:LinkButton id="storyBtnExpand" label="{data.expandLabel()}" click="outerDocument.expand(event);"/>		 	
							</mx:Box>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Name" wordWrap="true" dataField="listName" showDataTips="true" dataTipField="description" />
				<mx:DataGridColumn id="storyColumnIteration" width="135" headerText="Iteration" labelFunction="ViewHelper.formatIteration" sortCompareFunction="ViewHelper.sortIteration"/>
				<mx:DataGridColumn id="storyColumnTeam" headerText="Team" width="135" labelFunction="ViewHelper.formatTeam" sortCompareFunction="ViewHelper.sortTeam"/>
				<mx:DataGridColumn id="storyColumnIndividual" headerText="Owner" width="135" labelFunction="ViewHelper.formatIndividual" sortCompareFunction="ViewHelper.sortIndividual"/>
				<mx:DataGridColumn headerText="Effort" width="65" dataField="calculatedEffort" sortCompareFunction="ViewHelper.sortEffort"/>
				<mx:DataGridColumn editable="false" width="100" minWidth="115" headerText="Status" sortCompareFunction="ViewHelper.sortStatus">
					<mx:itemRenderer> 
						<mx:Component>
							<mx:Box direction="horizontal" horizontalGap="0">
							<mx:ComboBox width="100%" editable="false" selectedIndex="{data.statusCode}" change="outerDocument.updateStatus(data, event)" enabled="{outerDocument.factory.currentIndividual.isAtLeastProjectUser()}">
								<mx:Object label="Created" value="0" />
								<mx:Object label="In Progress" value="1" />
								<mx:Object label="Blocked" value="2" />
								<mx:Object label="Done" value="3" />
							</mx:ComboBox>
							</mx:Box>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Public" width="60" dataField="isPublic"/>
				<mx:DataGridColumn headerText="Rank" width="65" dataField="normalizedPriority" sortCompareFunction="ViewHelper.sortPriority"/>
				<mx:DataGridColumn headerText="User Rank" width="90" dataField="modifiedUserPriority" sortCompareFunction="ViewHelper.sortUserPriority"/>
				<mx:DataGridColumn editable="false" width="140" minWidth="140" sortable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Box direction="horizontal" horizontalGap="0" width="100%">
								<mx:LinkButton id="storyBtnEdit" icon="{parentApplication.imgEdit}" toolTip="Edit" click="outerDocument.showUpdate(event);" visible="{outerDocument.shouldShow(data)}"/>
								<mx:LinkButton id="storyBtnDelete" icon="{parentApplication.imgCross}" toolTip="Delete" click="outerDocument.showDelete(event);" visible="{outerDocument.shouldShow(data)}"/>
								<mx:LinkButton id="taskBtnAdd" icon="{parentApplication.imgAdd}" toolTip="Add Task" click="outerDocument.showCreateTask(event);" visible="{outerDocument.shouldShowStory(data)}"/>
								<mx:LinkButton id="storyBtnSplit" icon="{parentApplication.imgExport}" toolTip="Split" click="outerDocument.showSplit(event);" visible="{outerDocument.shouldShowStory(data)}"/>
							</mx:Box>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</local:columns>
		</local:ColoredBackgroundDataGrid>
	</mx:Panel>
</mx:Panel>