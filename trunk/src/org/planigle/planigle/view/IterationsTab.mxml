<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" label="Iterations" creationComplete="created(event)">
	<mx:HTTPService id="resourcePut" useProxy="false" method="POST" result="handleUpdate(event)" resultFormat="e4x"/>
	<mx:HTTPService id="resourceDelete" useProxy="false" method="POST" result="handleUpdate(event)" resultFormat="e4x"/>
	<mx:HTTPService id="resourcePost" url="/iterations.xml" useProxy="false" method="POST" result="handleUpdate(event)" resultFormat="e4x"/>
	
	<mx:Script>
		<![CDATA[
		import mx.rpc.events.ResultEvent;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.binding.utils.ChangeWatcher;
		import org.planigle.planigle.model.ViewModelLocator;
		import org.planigle.planigle.model.IterationFactory;
		import org.planigle.planigle.model.Iteration;
		import org.planigle.planigle.events.IterationChangedEvent;
		import modules.Core;
		
		[Bindable]
		private var _error:String;

		[Bindable]
		private var viewModelLocator:ViewModelLocator = ViewModelLocator.getInstance();

		// Set up event listeners.  Called when the canvas has been created.
		private function created(event:Event):void
		{
			ChangeWatcher.watch( viewModelLocator, "workflowState", resetState );			
		}
		
		// Clear the error message.
		private function clearErrorMessage():void {_error = ""}
		
		// Reset my state to how it was initially.
		private function resetState(event:Event):void
		{
			clearErrorMessage();
			currentState = '';
		}

		// Show user a form to create a resource.
		private function showCreate(event:Event):void
		{
			clearErrorMessage();
			currentState = 'Change';
			field_name.setFocus();
 			field_name.text = '';
			field_start.text = '';
			field_length.text = '';
			btn_change.label = 'Create';
		}

		// Show user a form to update a resource.
		public function showUpdate(event:Event) : void
		{
			clearErrorMessage();
			currentState = 'Change';
			field_name.setFocus();
			field_name.text = resource_grid.selectedItem.name;
			field_start.text = resource_grid.selectedItem.start;
			field_length.text = resource_grid.selectedItem.length;
			btn_change.label = 'Update';
		}

		// Confirm that user wants to delete the resource.
		public function showDelete(event:Event) : void
		{
			Alert.show("Are you sure you want to delete this?", "Delete", 3, this,
			function(event:CloseEvent):void
			{
				if (event.detail==Alert.YES)
				{
					clearErrorMessage();
					deleteResource(resource_grid.selectedItem.id);
				}
			});
		}
		
		// Create parameters for the user's request to the server.
		private function getParams() : Object
		{
			var params:Object = new Object();
			params['record[name]'] = field_name.text;
			params['record[start]'] = field_start.text;
			params['record[length]'] = field_length.text;
			params['random'] = Math.random(); // Prevents caching
			return params;
		}

		// Tell the server to change a resource.
		private function changeResource(event:Event) : void
		{
			if ( btn_change.label == 'Create' )
				createResource(event);
			else
				updateResource(event);
		}
		
		// Tell the server to create a resource.
		private function createResource(event:Event) : void 
		{
			resourcePost.send(getParams());
		}
		
		// Tell the server to update a resource.
		private function updateResource(event:Event) : void
		{
			var params:Object = getParams();
			params['_method'] = "PUT";
			resourcePut.url = "/iterations/" + resource_grid.selectedItem.id + ".xml";
			resourcePut.send(params);
		}

		// Tell the server to delete a resource.
		private function deleteResource(id:String):void
		{
			resourceDelete.url = "/iterations/" + id + ".xml";
			resourceDelete.send({_method: "DELETE"});
		}

		// The server has responded with the results of the user's change.
		private function handleUpdate(event:ResultEvent):void
		{
			var result:XML = XML(event.result);
			if (result.error.length() > 0)
				_error = result;
			else
			{
				resetState(event);
				new IterationChangedEvent().dispatch();
			}
		}
		
		// Go to iteration planning.
		public function showPlan(event:Event):void
		{
			var coreApp:CoreApplicationScreen = parentApplication.mainViewStack.getChildByName("core");
			var core:Core = Core(coreApp.getChildAt(0));
			var stories:StoriesTab = StoriesTab(core.mainViewStack.getChildByName("Stories"));
			stories.iteration.selectedItem = resource_grid.selectedItem;
			stories.handleFilter(null); // ensure filter affect occurs.
			core.mainViewStack.selectedChild = stories;
		}
		]]>
	</mx:Script>
 	
	<mx:states>
		<mx:State name="Change">
			<mx:RemoveChild target="{btn_create}"/>
			<mx:AddChild relativeTo="{resource_grid}" position="before">
				<mx:target>
					<mx:Form id="change_form">
						<mx:FormItem label='Name'>
							<mx:TextInput id='field_name' text='' width="350"/>
						</mx:FormItem>
						<mx:FormItem label='Start'>
							<mx:TextInput id='field_start' text='' width="350"/>
						</mx:FormItem>
						<mx:FormItem label='Length'>
							<mx:TextInput id='field_length' text='' width="350"/>
						</mx:FormItem>
						<mx:ControlBar width="100%">
							<mx:Spacer width="50"/>
							<mx:Button label="Change" id="btn_change" click="changeResource(event)"/>
							<mx:LinkButton label="Cancel" id="btn_cancel" click="resetState(event)"/>
						</mx:ControlBar>
					</mx:Form>	
				</mx:target>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition id="changeItem" fromState="*" toState="Change">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="returnList" fromState="Change" toState="*">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

	</mx:transitions>
	
	<mx:Panel id="combinedPanel" height="100%" y="0" width="100%" x="0">
		<mx:HBox width="100%" horizontalAlign="right" horizontalGap="8" verticalAlign="middle" id="hbox1" paddingTop="5" paddingLeft="5" paddingRight="5">
			<mx:Text id="error" styleName="error" htmlText="{_error}" color="#ff0033" width="100%"/>
			<mx:Button label="Create" id="btn_create" styleName="btn_create" click="showCreate(event);"/>
		</mx:HBox>
		<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" id="resource_grid" dataProvider="{IterationFactory.getInstance().iterations}" rowCount="{IterationFactory.getInstance().iterations.length}" width="100%" height="100%">
				<mx:columns>
				<mx:DataGridColumn headerText="Name" dataField="name"/>
				<mx:DataGridColumn headerText="Start" dataField="start"/>
				<mx:DataGridColumn headerText="Length" dataField="length"/>
				<mx:DataGridColumn editable="false" width="180" sortable="false"> 
					<mx:itemRenderer> 
						<mx:Component>
							<mx:Box direction="horizontal">
								<mx:LinkButton label="Plan" click="outerDocument.showPlan(event);"/>		 	
								<mx:LinkButton label="Edit" click="outerDocument.showUpdate(event);"/>		 	
								<mx:LinkButton label="Delete" click="outerDocument.showDelete(event);"/>		 	
							</mx:Box> 
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:Panel>
</mx:Canvas>