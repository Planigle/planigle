<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" label="Iterations" creationComplete="created(event)">
	<mx:Script>
		<![CDATA[
		import mx.rpc.events.ResultEvent;
		import mx.controls.Alert;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.events.CloseEvent;
		import mx.binding.utils.ChangeWatcher;
		import org.planigle.planigle.model.ViewModelLocator;
		import org.planigle.planigle.model.IterationFactory;
		import org.planigle.planigle.model.Iteration;
		import org.planigle.planigle.events.IterationChangedEvent;
		import modules.Core;
		
		[Bindable]
		private var _error:String;

		[Bindable]
		private var viewModelLocator:ViewModelLocator = ViewModelLocator.getInstance();

		// Set up event listeners.  Called when the canvas has been created.
		private function created(event:Event):void
		{
			ChangeWatcher.watch( viewModelLocator, "workflowState", resetState );			
		}
		
		// Clear the error message.
		private function clearErrorMessage():void {_error = ""}
		
		// Reset my state to how it was initially.
		public function resetState(event:Event):void
		{
			currentItem = null;
			clearErrorMessage();
			currentState = '';
		}

		// Show user a form to create a resource.
		private function showCreate(event:Event):void
		{
			clearErrorMessage();
			currentState = 'Change';
			field_name.setFocus();
			
			if(IterationFactory.getInstance().iterations.length > 0)
			{
				var last:Iteration = Iteration(IterationFactory.getInstance().iterations.getItemAt(IterationFactory.getInstance().iterations.length - 1));
				var splits:Array = last.name.split(" ");
				if (int(splits[splits.length-1]) > 0)
					{ // Increment last component of name if an integer.
					splits[splits.length-1] = (int(splits[splits.length-1])+1).toString();
					field_name.text = splits.join(" ");
					field_name.setSelection(0, field_name.text.length );
					}
				else
		 			field_name.text = '';
				field_start.selectedDate = last.end();
				field_length.text = last.length.toString();
			}
			else
			{
	 			field_name.text = '';
				field_start.selectedDate = null;
				field_length.text = '';
			}
			btn_change.label = 'Create';
		}

		private var currentItem:Object;

		// Show user a form to update a resource.
		public function showUpdate(event:Event) : void
		{
			currentItem = resource_grid.selectedItem;
			if (currentItem)
			{
				clearErrorMessage();
				currentState = 'Change';
				field_name.text = currentItem.name;
				field_name.setFocus();
				field_name.setSelection(0, field_name.text.length );
				field_start.selectedDate = currentItem.start;
				field_length.text = currentItem.length;
				btn_change.label = 'Update';
			}
		}

		// Confirm that user wants to delete the resource.
		public function showDelete(event:Event) : void
		{
			Alert.show("Are you sure you want to delete this?", "Delete", 3, this,
			function(event:CloseEvent):void
			{
				if (event.detail==Alert.YES)
				{
					clearErrorMessage();
					deleteResource(resource_grid.selectedItem);
				}
			});
		}
		
		// Create parameters for the user's request to the server.
		private function getParams() : Object
		{
			var params:Object = new Object();
			params['record[name]'] = field_name.text;
			params['record[start]'] = field_start.selectedDate;
			params['record[length]'] = field_length.text;
			params['random'] = Math.random(); // Prevents caching
			return params;
		}

		// Tell the server to change a resource.
		private function changeResource(event:Event) : void
		{
			if ( btn_change.label == 'Create' )
				createResource(event);
			else
				updateResource(event);
		}
		
		// Tell the server to create a resource.
		private function createResource(event:Event) : void 
		{
			IterationFactory.getInstance().createIteration(getParams(), handleCreateSuccess, handleFailure);
		}
		
		// Tell the server to update a resource.
		private function updateResource(event:Event) : void
		{
			currentItem.update(getParams(), handleSuccess, handleFailure);
		}

		// Tell the server to delete a resource.
		private function deleteResource(resource:Object):void
		{
			resource.destroy(handleSuccess, handleFailure);
		}
		
		// Handle a successful create.
		private function handleCreateSuccess():void
		{
			showCreate(null);
			_error = "Iteration was successfully created."
		}

		// Handle a successful change.
		private function handleSuccess():void
		{
			resetState(null);
		}

		// Handle errors when making changes.
		private function handleFailure(error:XMLList):void
		{
			_error = error;
		}
		
		// Go to iteration planning.
		public function showPlan(event:Event):void
		{
			var coreApp:CoreApplicationScreen = parentApplication.mainViewStack.getChildByName("core");
			var core:Core = Core(coreApp.getChildAt(0));
			var stories:StoriesTab = StoriesTab(core.mainViewStack.getChildByName("Stories"));
			stories.iteration.selectedItem = resource_grid.selectedItem;
			stories.handleFilter(null); // ensure filter affect occurs.
			core.mainViewStack.selectedChild = stories;
		}
		
		// Format the start date into a more readable format.
		private function formatDate(item:Object, column:DataGridColumn):String
		{
			return (item.start.month + 1) + "/" + item.start.date + "/" + item.start.fullYear;
		}
		]]>
	</mx:Script>
 	
	<mx:states>
		<mx:State name="Change">
			<mx:RemoveChild target="{btn_create}"/>
			<mx:AddChild relativeTo="{resource_grid}" position="before">
				<mx:target>
					<mx:Form id="change_form" defaultButton="{btn_change}">
						<mx:FormItem label='Name' required="true">
							<mx:TextInput id='field_name' maxChars="40" text='' width="350"/>
						</mx:FormItem>
						<mx:FormItem label='Start' required="true">
							<mx:DateField id='field_start' editable="true" showToday="true" width="100"/>
						</mx:FormItem>
						<mx:FormItem label='Length' required="true">
							<mx:TextInput id='field_length' restrict="0-9" text='' width="350"/>
						</mx:FormItem>
						<mx:ControlBar width="100%">
							<mx:Spacer width="50"/>
							<mx:Button label="Change" id="btn_change" click="changeResource(event)"/>
							<mx:LinkButton label="Cancel" id="btn_cancel" click="resetState(event)"/>
						</mx:ControlBar>
					</mx:Form>	
				</mx:target>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition id="changeItem" fromState="*" toState="Change">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

		<mx:Transition id="returnList" fromState="Change" toState="*">
			<mx:Sequence targets="{[combinedPanel]}">
				<mx:RemoveChildAction/>
				<mx:Resize target="{combinedPanel}"/>
				<mx:AddChildAction/>
			</mx:Sequence>
		</mx:Transition>

	</mx:transitions>
	
	<mx:Panel id="combinedPanel" height="100%" y="0" width="100%" x="0">
		<mx:HBox width="100%" horizontalAlign="right" horizontalGap="8" verticalAlign="middle" id="hbox1" paddingTop="5" paddingLeft="5" paddingRight="5">
			<mx:Text id="error" styleName="error" htmlText="{_error}" color="#ff0033" width="100%"/>
			<mx:Button label="Create" id="btn_create" styleName="btn_create" click="showCreate(event);"/>
		</mx:HBox>
		<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" id="resource_grid" dataProvider="{IterationFactory.getInstance().iterations}" rowCount="{IterationFactory.getInstance().iterations.length}" width="100%" height="100%" doubleClickEnabled="true" doubleClick="showUpdate(event)">
				<mx:columns>
				<mx:DataGridColumn headerText="Name" dataField="name"/>
				<mx:DataGridColumn headerText="Start" dataField="start" labelFunction="formatDate" />
				<mx:DataGridColumn headerText="Length" dataField="length"/>
				<mx:DataGridColumn editable="false" width="90" minWidth="90" sortable="false">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Box direction="horizontal" horizontalGap="0">
								<mx:LinkButton icon="{parentApplication.imgExport}" toolTip="Plan" click="outerDocument.showPlan(event);"/>
								<mx:LinkButton icon="{parentApplication.imgEdit}" toolTip="Edit" click="outerDocument.showUpdate(event);"/>
								<mx:LinkButton icon="{parentApplication.imgCross}" toolTip="Delete" click="outerDocument.showDelete(event);"/>
							</mx:Box>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:Panel>
</mx:Canvas>